/* automatically generated by rust-bindgen */

pub const OPENXR_H_: u32 = 1;
pub const XR_VERSION_1_0: u32 = 1;
pub const OPENXR_PLATFORM_DEFINES_H_: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const XR_PTR_SIZE: u32 = 8;
pub const XR_NULL_HANDLE: u32 = 0;
pub const XR_NULL_SYSTEM_ID: u32 = 0;
pub const XR_NULL_PATH: u32 = 0;
pub const XR_NO_DURATION: u32 = 0;
pub const XR_INFINITE_DURATION: u64 = 9223372036854775807;
pub const XR_MIN_HAPTIC_DURATION: i32 = -1;
pub const XR_FREQUENCY_UNSPECIFIED: u32 = 0;
pub const XR_TRUE: u32 = 1;
pub const XR_FALSE: u32 = 0;
pub const XR_MAX_EXTENSION_NAME_SIZE: u32 = 128;
pub const XR_MAX_API_LAYER_NAME_SIZE: u32 = 256;
pub const XR_MAX_API_LAYER_DESCRIPTION_SIZE: u32 = 256;
pub const XR_MAX_SYSTEM_NAME_SIZE: u32 = 256;
pub const XR_MAX_APPLICATION_NAME_SIZE: u32 = 128;
pub const XR_MAX_ENGINE_NAME_SIZE: u32 = 128;
pub const XR_MAX_RUNTIME_NAME_SIZE: u32 = 128;
pub const XR_MAX_PATH_LENGTH: u32 = 256;
pub const XR_MAX_STRUCTURE_NAME_SIZE: u32 = 64;
pub const XR_MAX_RESULT_STRING_SIZE: u32 = 64;
pub const XR_MIN_COMPOSITION_LAYERS_SUPPORTED: u32 = 16;
pub const XR_MAX_ACTION_SET_NAME_SIZE: u32 = 64;
pub const XR_MAX_LOCALIZED_ACTION_SET_NAME_SIZE: u32 = 128;
pub const XR_MAX_ACTION_NAME_SIZE: u32 = 64;
pub const XR_MAX_LOCALIZED_ACTION_NAME_SIZE: u32 = 128;
pub const XR_KHR_composition_layer_cube: u32 = 1;
pub const XR_KHR_composition_layer_cube_SPEC_VERSION: u32 = 8;
pub const XR_KHR_COMPOSITION_LAYER_CUBE_EXTENSION_NAME: &'static [u8; 30usize] =
    b"XR_KHR_composition_layer_cube\0";
pub const XR_KHR_composition_layer_depth: u32 = 1;
pub const XR_KHR_composition_layer_depth_SPEC_VERSION: u32 = 5;
pub const XR_KHR_COMPOSITION_LAYER_DEPTH_EXTENSION_NAME: &'static [u8; 31usize] =
    b"XR_KHR_composition_layer_depth\0";
pub const XR_KHR_composition_layer_cylinder: u32 = 1;
pub const XR_KHR_composition_layer_cylinder_SPEC_VERSION: u32 = 4;
pub const XR_KHR_COMPOSITION_LAYER_CYLINDER_EXTENSION_NAME: &'static [u8; 34usize] =
    b"XR_KHR_composition_layer_cylinder\0";
pub const XR_KHR_composition_layer_equirect: u32 = 1;
pub const XR_KHR_composition_layer_equirect_SPEC_VERSION: u32 = 3;
pub const XR_KHR_COMPOSITION_LAYER_EQUIRECT_EXTENSION_NAME: &'static [u8; 34usize] =
    b"XR_KHR_composition_layer_equirect\0";
pub const XR_KHR_visibility_mask: u32 = 1;
pub const XR_KHR_visibility_mask_SPEC_VERSION: u32 = 2;
pub const XR_KHR_VISIBILITY_MASK_EXTENSION_NAME: &'static [u8; 23usize] =
    b"XR_KHR_visibility_mask\0";
pub const XR_KHR_composition_layer_color_scale_bias: u32 = 1;
pub const XR_KHR_composition_layer_color_scale_bias_SPEC_VERSION: u32 = 5;
pub const XR_KHR_COMPOSITION_LAYER_COLOR_SCALE_BIAS_EXTENSION_NAME: &'static [u8; 42usize] =
    b"XR_KHR_composition_layer_color_scale_bias\0";
pub const XR_KHR_loader_init: u32 = 1;
pub const XR_KHR_loader_init_SPEC_VERSION: u32 = 1;
pub const XR_KHR_LOADER_INIT_EXTENSION_NAME: &'static [u8; 19usize] = b"XR_KHR_loader_init\0";
pub const XR_KHR_composition_layer_equirect2: u32 = 1;
pub const XR_KHR_composition_layer_equirect2_SPEC_VERSION: u32 = 1;
pub const XR_KHR_COMPOSITION_LAYER_EQUIRECT2_EXTENSION_NAME: &'static [u8; 35usize] =
    b"XR_KHR_composition_layer_equirect2\0";
pub const XR_KHR_binding_modification: u32 = 1;
pub const XR_KHR_binding_modification_SPEC_VERSION: u32 = 1;
pub const XR_KHR_BINDING_MODIFICATION_EXTENSION_NAME: &'static [u8; 28usize] =
    b"XR_KHR_binding_modification\0";
pub const XR_EXT_performance_settings: u32 = 1;
pub const XR_EXT_performance_settings_SPEC_VERSION: u32 = 3;
pub const XR_EXT_PERFORMANCE_SETTINGS_EXTENSION_NAME: &'static [u8; 28usize] =
    b"XR_EXT_performance_settings\0";
pub const XR_EXT_thermal_query: u32 = 1;
pub const XR_EXT_thermal_query_SPEC_VERSION: u32 = 2;
pub const XR_EXT_THERMAL_QUERY_EXTENSION_NAME: &'static [u8; 21usize] = b"XR_EXT_thermal_query\0";
pub const XR_EXT_debug_utils: u32 = 1;
pub const XR_EXT_debug_utils_SPEC_VERSION: u32 = 4;
pub const XR_EXT_DEBUG_UTILS_EXTENSION_NAME: &'static [u8; 19usize] = b"XR_EXT_debug_utils\0";
pub const XR_EXT_eye_gaze_interaction: u32 = 1;
pub const XR_EXT_eye_gaze_interaction_SPEC_VERSION: u32 = 1;
pub const XR_EXT_EYE_GAZE_INTERACTION_EXTENSION_NAME: &'static [u8; 28usize] =
    b"XR_EXT_eye_gaze_interaction\0";
pub const XR_EXTX_overlay: u32 = 1;
pub const XR_EXTX_overlay_SPEC_VERSION: u32 = 5;
pub const XR_EXTX_OVERLAY_EXTENSION_NAME: &'static [u8; 16usize] = b"XR_EXTX_overlay\0";
pub const XR_VARJO_quad_views: u32 = 1;
pub const XR_VARJO_quad_views_SPEC_VERSION: u32 = 1;
pub const XR_VARJO_QUAD_VIEWS_EXTENSION_NAME: &'static [u8; 20usize] = b"XR_VARJO_quad_views\0";
pub const XR_MSFT_unbounded_reference_space: u32 = 1;
pub const XR_MSFT_unbounded_reference_space_SPEC_VERSION: u32 = 1;
pub const XR_MSFT_UNBOUNDED_REFERENCE_SPACE_EXTENSION_NAME: &'static [u8; 34usize] =
    b"XR_MSFT_unbounded_reference_space\0";
pub const XR_MSFT_spatial_anchor: u32 = 1;
pub const XR_MSFT_spatial_anchor_SPEC_VERSION: u32 = 1;
pub const XR_MSFT_SPATIAL_ANCHOR_EXTENSION_NAME: &'static [u8; 23usize] =
    b"XR_MSFT_spatial_anchor\0";
pub const XR_MND_headless: u32 = 1;
pub const XR_MND_headless_SPEC_VERSION: u32 = 2;
pub const XR_MND_HEADLESS_EXTENSION_NAME: &'static [u8; 16usize] = b"XR_MND_headless\0";
pub const XR_OCULUS_android_session_state_enable: u32 = 1;
pub const XR_OCULUS_android_session_state_enable_SPEC_VERSION: u32 = 1;
pub const XR_OCULUS_ANDROID_SESSION_STATE_ENABLE_EXTENSION_NAME: &'static [u8; 39usize] =
    b"XR_OCULUS_android_session_state_enable\0";
pub const XR_EXT_view_configuration_depth_range: u32 = 1;
pub const XR_EXT_view_configuration_depth_range_SPEC_VERSION: u32 = 1;
pub const XR_EXT_VIEW_CONFIGURATION_DEPTH_RANGE_EXTENSION_NAME: &'static [u8; 38usize] =
    b"XR_EXT_view_configuration_depth_range\0";
pub const XR_EXT_conformance_automation: u32 = 1;
pub const XR_EXT_conformance_automation_SPEC_VERSION: u32 = 3;
pub const XR_EXT_CONFORMANCE_AUTOMATION_EXTENSION_NAME: &'static [u8; 30usize] =
    b"XR_EXT_conformance_automation\0";
pub const XR_MSFT_spatial_graph_bridge: u32 = 1;
pub const XR_MSFT_spatial_graph_bridge_SPEC_VERSION: u32 = 1;
pub const XR_MSFT_SPATIAL_GRAPH_BRIDGE_EXTENSION_NAME: &'static [u8; 29usize] =
    b"XR_MSFT_spatial_graph_bridge\0";
pub const XR_MSFT_hand_interaction: u32 = 1;
pub const XR_MSFT_hand_interaction_SPEC_VERSION: u32 = 1;
pub const XR_MSFT_HAND_INTERACTION_EXTENSION_NAME: &'static [u8; 25usize] =
    b"XR_MSFT_hand_interaction\0";
pub const XR_EXT_hand_tracking: u32 = 1;
pub const XR_HAND_JOINT_COUNT_EXT: u32 = 26;
pub const XR_EXT_hand_tracking_SPEC_VERSION: u32 = 4;
pub const XR_EXT_HAND_TRACKING_EXTENSION_NAME: &'static [u8; 21usize] = b"XR_EXT_hand_tracking\0";
pub const XR_MSFT_hand_tracking_mesh: u32 = 1;
pub const XR_MSFT_hand_tracking_mesh_SPEC_VERSION: u32 = 3;
pub const XR_MSFT_HAND_TRACKING_MESH_EXTENSION_NAME: &'static [u8; 27usize] =
    b"XR_MSFT_hand_tracking_mesh\0";
pub const XR_MSFT_secondary_view_configuration: u32 = 1;
pub const XR_MSFT_secondary_view_configuration_SPEC_VERSION: u32 = 1;
pub const XR_MSFT_SECONDARY_VIEW_CONFIGURATION_EXTENSION_NAME: &'static [u8; 37usize] =
    b"XR_MSFT_secondary_view_configuration\0";
pub const XR_MSFT_first_person_observer: u32 = 1;
pub const XR_MSFT_first_person_observer_SPEC_VERSION: u32 = 1;
pub const XR_MSFT_FIRST_PERSON_OBSERVER_EXTENSION_NAME: &'static [u8; 30usize] =
    b"XR_MSFT_first_person_observer\0";
pub const XR_MSFT_controller_model: u32 = 1;
pub const XR_NULL_CONTROLLER_MODEL_KEY_MSFT: u32 = 0;
pub const XR_MSFT_controller_model_SPEC_VERSION: u32 = 2;
pub const XR_MSFT_CONTROLLER_MODEL_EXTENSION_NAME: &'static [u8; 25usize] =
    b"XR_MSFT_controller_model\0";
pub const XR_MAX_CONTROLLER_MODEL_NODE_NAME_SIZE_MSFT: u32 = 64;
pub const XR_EXT_win32_appcontainer_compatible: u32 = 1;
pub const XR_EXT_win32_appcontainer_compatible_SPEC_VERSION: u32 = 1;
pub const XR_EXT_WIN32_APPCONTAINER_COMPATIBLE_EXTENSION_NAME: &'static [u8; 37usize] =
    b"XR_EXT_win32_appcontainer_compatible\0";
pub const XR_EPIC_view_configuration_fov: u32 = 1;
pub const XR_EPIC_view_configuration_fov_SPEC_VERSION: u32 = 2;
pub const XR_EPIC_VIEW_CONFIGURATION_FOV_EXTENSION_NAME: &'static [u8; 31usize] =
    b"XR_EPIC_view_configuration_fov\0";
pub const XR_HUAWEI_controller_interaction: u32 = 1;
pub const XR_HUAWEI_controller_interaction_SPEC_VERSION: u32 = 1;
pub const XR_HUAWEI_CONTROLLER_INTERACTION_EXTENSION_NAME: &'static [u8; 33usize] =
    b"XR_HUAWEI_controller_interaction\0";
pub const XR_VALVE_analog_threshold: u32 = 1;
pub const XR_VALVE_analog_threshold_SPEC_VERSION: u32 = 1;
pub const XR_VALVE_ANALOG_THRESHOLD_EXTENSION_NAME: &'static [u8; 26usize] =
    b"XR_VALVE_analog_threshold\0";
pub const XR_EXT_hand_joints_motion_range: u32 = 1;
pub const XR_EXT_hand_joints_motion_range_SPEC_VERSION: u32 = 1;
pub const XR_EXT_HAND_JOINTS_MOTION_RANGE_EXTENSION_NAME: &'static [u8; 32usize] =
    b"XR_EXT_hand_joints_motion_range\0";
pub const XR_EXT_samsung_odyssey_controller: u32 = 1;
pub const XR_EXT_samsung_odyssey_controller_SPEC_VERSION: u32 = 1;
pub const XR_EXT_SAMSUNG_ODYSSEY_CONTROLLER_EXTENSION_NAME: &'static [u8; 34usize] =
    b"XR_EXT_samsung_odyssey_controller\0";
pub const XR_EXT_hp_mixed_reality_controller: u32 = 1;
pub const XR_EXT_hp_mixed_reality_controller_SPEC_VERSION: u32 = 1;
pub const XR_EXT_HP_MIXED_REALITY_CONTROLLER_EXTENSION_NAME: &'static [u8; 35usize] =
    b"XR_EXT_hp_mixed_reality_controller\0";
pub const XR_MND_swapchain_usage_input_attachment_bit: u32 = 1;
pub const XR_MND_swapchain_usage_input_attachment_bit_SPEC_VERSION: u32 = 2;
pub const XR_MND_SWAPCHAIN_USAGE_INPUT_ATTACHMENT_BIT_EXTENSION_NAME: &'static [u8; 44usize] =
    b"XR_MND_swapchain_usage_input_attachment_bit\0";
pub const XR_FB_display_refresh_rate: u32 = 1;
pub const XR_FB_display_refresh_rate_SPEC_VERSION: u32 = 1;
pub const XR_FB_DISPLAY_REFRESH_RATE_EXTENSION_NAME: &'static [u8; 27usize] =
    b"XR_FB_display_refresh_rate\0";
pub const XR_HTC_vive_cosmos_controller_interaction: u32 = 1;
pub const XR_HTC_vive_cosmos_controller_interaction_SPEC_VERSION: u32 = 1;
pub const XR_HTC_VIVE_COSMOS_CONTROLLER_INTERACTION_EXTENSION_NAME: &'static [u8; 42usize] =
    b"XR_HTC_vive_cosmos_controller_interaction\0";
pub const XR_FB_color_space: u32 = 1;
pub const XR_FB_color_space_SPEC_VERSION: u32 = 1;
pub const XR_FB_COLOR_SPACE_EXTENSION_NAME: &'static [u8; 18usize] = b"XR_FB_color_space\0";
pub const XR_VARJO_foveated_rendering: u32 = 1;
pub const XR_VARJO_foveated_rendering_SPEC_VERSION: u32 = 1;
pub const XR_VARJO_FOVEATED_RENDERING_EXTENSION_NAME: &'static [u8; 28usize] =
    b"XR_VARJO_foveated_rendering\0";
pub const XR_VARJO_composition_layer_depth_test: u32 = 1;
pub const XR_VARJO_composition_layer_depth_test_SPEC_VERSION: u32 = 1;
pub const XR_VARJO_COMPOSITION_LAYER_DEPTH_TEST_EXTENSION_NAME: &'static [u8; 38usize] =
    b"XR_VARJO_composition_layer_depth_test\0";
pub const XR_VARJO_environment_depth_estimation: u32 = 1;
pub const XR_VARJO_environment_depth_estimation_SPEC_VERSION: u32 = 1;
pub const XR_VARJO_ENVIRONMENT_DEPTH_ESTIMATION_EXTENSION_NAME: &'static [u8; 38usize] =
    b"XR_VARJO_environment_depth_estimation\0";
pub const XR_CURRENT_LOADER_API_LAYER_VERSION: u32 = 1;
pub const XR_CURRENT_LOADER_RUNTIME_VERSION: u32 = 1;
pub const XR_LOADER_INFO_STRUCT_VERSION: u32 = 1;
pub const XR_API_LAYER_INFO_STRUCT_VERSION: u32 = 1;
pub const XR_RUNTIME_INFO_STRUCT_VERSION: u32 = 1;
pub const XR_API_LAYER_NEXT_INFO_STRUCT_VERSION: u32 = 1;
pub const XR_API_LAYER_MAX_SETTINGS_PATH_SIZE: u32 = 512;
pub const XR_API_LAYER_CREATE_INFO_STRUCT_VERSION: u32 = 1;
pub type size_t = ::std::os::raw::c_ulonglong;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type max_align_t = f64;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type XrVersion = u64;
pub type XrFlags64 = u64;
pub type XrSystemId = u64;
pub type XrBool32 = u32;
pub type XrPath = u64;
pub type XrTime = i64;
pub type XrDuration = i64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrInstance_T {
    _unused: [u8; 0],
}
pub type XrInstance = *mut XrInstance_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSession_T {
    _unused: [u8; 0],
}
pub type XrSession = *mut XrSession_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpace_T {
    _unused: [u8; 0],
}
pub type XrSpace = *mut XrSpace_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrAction_T {
    _unused: [u8; 0],
}
pub type XrAction = *mut XrAction_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchain_T {
    _unused: [u8; 0],
}
pub type XrSwapchain = *mut XrSwapchain_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionSet_T {
    _unused: [u8; 0],
}
pub type XrActionSet = *mut XrActionSet_T;
pub const XrResult_XR_SUCCESS: XrResult = 0;
pub const XrResult_XR_TIMEOUT_EXPIRED: XrResult = 1;
pub const XrResult_XR_SESSION_LOSS_PENDING: XrResult = 3;
pub const XrResult_XR_EVENT_UNAVAILABLE: XrResult = 4;
pub const XrResult_XR_SPACE_BOUNDS_UNAVAILABLE: XrResult = 7;
pub const XrResult_XR_SESSION_NOT_FOCUSED: XrResult = 8;
pub const XrResult_XR_FRAME_DISCARDED: XrResult = 9;
pub const XrResult_XR_ERROR_VALIDATION_FAILURE: XrResult = -1;
pub const XrResult_XR_ERROR_RUNTIME_FAILURE: XrResult = -2;
pub const XrResult_XR_ERROR_OUT_OF_MEMORY: XrResult = -3;
pub const XrResult_XR_ERROR_API_VERSION_UNSUPPORTED: XrResult = -4;
pub const XrResult_XR_ERROR_INITIALIZATION_FAILED: XrResult = -6;
pub const XrResult_XR_ERROR_FUNCTION_UNSUPPORTED: XrResult = -7;
pub const XrResult_XR_ERROR_FEATURE_UNSUPPORTED: XrResult = -8;
pub const XrResult_XR_ERROR_EXTENSION_NOT_PRESENT: XrResult = -9;
pub const XrResult_XR_ERROR_LIMIT_REACHED: XrResult = -10;
pub const XrResult_XR_ERROR_SIZE_INSUFFICIENT: XrResult = -11;
pub const XrResult_XR_ERROR_HANDLE_INVALID: XrResult = -12;
pub const XrResult_XR_ERROR_INSTANCE_LOST: XrResult = -13;
pub const XrResult_XR_ERROR_SESSION_RUNNING: XrResult = -14;
pub const XrResult_XR_ERROR_SESSION_NOT_RUNNING: XrResult = -16;
pub const XrResult_XR_ERROR_SESSION_LOST: XrResult = -17;
pub const XrResult_XR_ERROR_SYSTEM_INVALID: XrResult = -18;
pub const XrResult_XR_ERROR_PATH_INVALID: XrResult = -19;
pub const XrResult_XR_ERROR_PATH_COUNT_EXCEEDED: XrResult = -20;
pub const XrResult_XR_ERROR_PATH_FORMAT_INVALID: XrResult = -21;
pub const XrResult_XR_ERROR_PATH_UNSUPPORTED: XrResult = -22;
pub const XrResult_XR_ERROR_LAYER_INVALID: XrResult = -23;
pub const XrResult_XR_ERROR_LAYER_LIMIT_EXCEEDED: XrResult = -24;
pub const XrResult_XR_ERROR_SWAPCHAIN_RECT_INVALID: XrResult = -25;
pub const XrResult_XR_ERROR_SWAPCHAIN_FORMAT_UNSUPPORTED: XrResult = -26;
pub const XrResult_XR_ERROR_ACTION_TYPE_MISMATCH: XrResult = -27;
pub const XrResult_XR_ERROR_SESSION_NOT_READY: XrResult = -28;
pub const XrResult_XR_ERROR_SESSION_NOT_STOPPING: XrResult = -29;
pub const XrResult_XR_ERROR_TIME_INVALID: XrResult = -30;
pub const XrResult_XR_ERROR_REFERENCE_SPACE_UNSUPPORTED: XrResult = -31;
pub const XrResult_XR_ERROR_FILE_ACCESS_ERROR: XrResult = -32;
pub const XrResult_XR_ERROR_FILE_CONTENTS_INVALID: XrResult = -33;
pub const XrResult_XR_ERROR_FORM_FACTOR_UNSUPPORTED: XrResult = -34;
pub const XrResult_XR_ERROR_FORM_FACTOR_UNAVAILABLE: XrResult = -35;
pub const XrResult_XR_ERROR_API_LAYER_NOT_PRESENT: XrResult = -36;
pub const XrResult_XR_ERROR_CALL_ORDER_INVALID: XrResult = -37;
pub const XrResult_XR_ERROR_GRAPHICS_DEVICE_INVALID: XrResult = -38;
pub const XrResult_XR_ERROR_POSE_INVALID: XrResult = -39;
pub const XrResult_XR_ERROR_INDEX_OUT_OF_RANGE: XrResult = -40;
pub const XrResult_XR_ERROR_VIEW_CONFIGURATION_TYPE_UNSUPPORTED: XrResult = -41;
pub const XrResult_XR_ERROR_ENVIRONMENT_BLEND_MODE_UNSUPPORTED: XrResult = -42;
pub const XrResult_XR_ERROR_NAME_DUPLICATED: XrResult = -44;
pub const XrResult_XR_ERROR_NAME_INVALID: XrResult = -45;
pub const XrResult_XR_ERROR_ACTIONSET_NOT_ATTACHED: XrResult = -46;
pub const XrResult_XR_ERROR_ACTIONSETS_ALREADY_ATTACHED: XrResult = -47;
pub const XrResult_XR_ERROR_LOCALIZED_NAME_DUPLICATED: XrResult = -48;
pub const XrResult_XR_ERROR_LOCALIZED_NAME_INVALID: XrResult = -49;
pub const XrResult_XR_ERROR_GRAPHICS_REQUIREMENTS_CALL_MISSING: XrResult = -50;
pub const XrResult_XR_ERROR_RUNTIME_UNAVAILABLE: XrResult = -51;
pub const XrResult_XR_ERROR_ANDROID_THREAD_SETTINGS_ID_INVALID_KHR: XrResult = -1000003000;
pub const XrResult_XR_ERROR_ANDROID_THREAD_SETTINGS_FAILURE_KHR: XrResult = -1000003001;
pub const XrResult_XR_ERROR_CREATE_SPATIAL_ANCHOR_FAILED_MSFT: XrResult = -1000039001;
pub const XrResult_XR_ERROR_SECONDARY_VIEW_CONFIGURATION_TYPE_NOT_ENABLED_MSFT: XrResult =
    -1000053000;
pub const XrResult_XR_ERROR_CONTROLLER_MODEL_KEY_INVALID_MSFT: XrResult = -1000055000;
pub const XrResult_XR_ERROR_DISPLAY_REFRESH_RATE_UNSUPPORTED_FB: XrResult = -1000101000;
pub const XrResult_XR_ERROR_COLOR_SPACE_UNSUPPORTED_FB: XrResult = -1000108000;
pub const XrResult_XR_RESULT_MAX_ENUM: XrResult = 2147483647;
pub type XrResult = i32;
pub const XrStructureType_XR_TYPE_UNKNOWN: XrStructureType = 0;
pub const XrStructureType_XR_TYPE_API_LAYER_PROPERTIES: XrStructureType = 1;
pub const XrStructureType_XR_TYPE_EXTENSION_PROPERTIES: XrStructureType = 2;
pub const XrStructureType_XR_TYPE_INSTANCE_CREATE_INFO: XrStructureType = 3;
pub const XrStructureType_XR_TYPE_SYSTEM_GET_INFO: XrStructureType = 4;
pub const XrStructureType_XR_TYPE_SYSTEM_PROPERTIES: XrStructureType = 5;
pub const XrStructureType_XR_TYPE_VIEW_LOCATE_INFO: XrStructureType = 6;
pub const XrStructureType_XR_TYPE_VIEW: XrStructureType = 7;
pub const XrStructureType_XR_TYPE_SESSION_CREATE_INFO: XrStructureType = 8;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_CREATE_INFO: XrStructureType = 9;
pub const XrStructureType_XR_TYPE_SESSION_BEGIN_INFO: XrStructureType = 10;
pub const XrStructureType_XR_TYPE_VIEW_STATE: XrStructureType = 11;
pub const XrStructureType_XR_TYPE_FRAME_END_INFO: XrStructureType = 12;
pub const XrStructureType_XR_TYPE_HAPTIC_VIBRATION: XrStructureType = 13;
pub const XrStructureType_XR_TYPE_EVENT_DATA_BUFFER: XrStructureType = 16;
pub const XrStructureType_XR_TYPE_EVENT_DATA_INSTANCE_LOSS_PENDING: XrStructureType = 17;
pub const XrStructureType_XR_TYPE_EVENT_DATA_SESSION_STATE_CHANGED: XrStructureType = 18;
pub const XrStructureType_XR_TYPE_ACTION_STATE_BOOLEAN: XrStructureType = 23;
pub const XrStructureType_XR_TYPE_ACTION_STATE_FLOAT: XrStructureType = 24;
pub const XrStructureType_XR_TYPE_ACTION_STATE_VECTOR2F: XrStructureType = 25;
pub const XrStructureType_XR_TYPE_ACTION_STATE_POSE: XrStructureType = 27;
pub const XrStructureType_XR_TYPE_ACTION_SET_CREATE_INFO: XrStructureType = 28;
pub const XrStructureType_XR_TYPE_ACTION_CREATE_INFO: XrStructureType = 29;
pub const XrStructureType_XR_TYPE_INSTANCE_PROPERTIES: XrStructureType = 32;
pub const XrStructureType_XR_TYPE_FRAME_WAIT_INFO: XrStructureType = 33;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_PROJECTION: XrStructureType = 35;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_QUAD: XrStructureType = 36;
pub const XrStructureType_XR_TYPE_REFERENCE_SPACE_CREATE_INFO: XrStructureType = 37;
pub const XrStructureType_XR_TYPE_ACTION_SPACE_CREATE_INFO: XrStructureType = 38;
pub const XrStructureType_XR_TYPE_EVENT_DATA_REFERENCE_SPACE_CHANGE_PENDING: XrStructureType = 40;
pub const XrStructureType_XR_TYPE_VIEW_CONFIGURATION_VIEW: XrStructureType = 41;
pub const XrStructureType_XR_TYPE_SPACE_LOCATION: XrStructureType = 42;
pub const XrStructureType_XR_TYPE_SPACE_VELOCITY: XrStructureType = 43;
pub const XrStructureType_XR_TYPE_FRAME_STATE: XrStructureType = 44;
pub const XrStructureType_XR_TYPE_VIEW_CONFIGURATION_PROPERTIES: XrStructureType = 45;
pub const XrStructureType_XR_TYPE_FRAME_BEGIN_INFO: XrStructureType = 46;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_PROJECTION_VIEW: XrStructureType = 48;
pub const XrStructureType_XR_TYPE_EVENT_DATA_EVENTS_LOST: XrStructureType = 49;
pub const XrStructureType_XR_TYPE_INTERACTION_PROFILE_SUGGESTED_BINDING: XrStructureType = 51;
pub const XrStructureType_XR_TYPE_EVENT_DATA_INTERACTION_PROFILE_CHANGED: XrStructureType = 52;
pub const XrStructureType_XR_TYPE_INTERACTION_PROFILE_STATE: XrStructureType = 53;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_ACQUIRE_INFO: XrStructureType = 55;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_WAIT_INFO: XrStructureType = 56;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_RELEASE_INFO: XrStructureType = 57;
pub const XrStructureType_XR_TYPE_ACTION_STATE_GET_INFO: XrStructureType = 58;
pub const XrStructureType_XR_TYPE_HAPTIC_ACTION_INFO: XrStructureType = 59;
pub const XrStructureType_XR_TYPE_SESSION_ACTION_SETS_ATTACH_INFO: XrStructureType = 60;
pub const XrStructureType_XR_TYPE_ACTIONS_SYNC_INFO: XrStructureType = 61;
pub const XrStructureType_XR_TYPE_BOUND_SOURCES_FOR_ACTION_ENUMERATE_INFO: XrStructureType = 62;
pub const XrStructureType_XR_TYPE_INPUT_SOURCE_LOCALIZED_NAME_GET_INFO: XrStructureType = 63;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_CUBE_KHR: XrStructureType = 1000006000;
pub const XrStructureType_XR_TYPE_INSTANCE_CREATE_INFO_ANDROID_KHR: XrStructureType = 1000008000;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_DEPTH_INFO_KHR: XrStructureType = 1000010000;
pub const XrStructureType_XR_TYPE_VULKAN_SWAPCHAIN_FORMAT_LIST_CREATE_INFO_KHR: XrStructureType =
    1000014000;
pub const XrStructureType_XR_TYPE_EVENT_DATA_PERF_SETTINGS_EXT: XrStructureType = 1000015000;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_CYLINDER_KHR: XrStructureType = 1000017000;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_EQUIRECT_KHR: XrStructureType = 1000018000;
pub const XrStructureType_XR_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT: XrStructureType = 1000019000;
pub const XrStructureType_XR_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT: XrStructureType =
    1000019001;
pub const XrStructureType_XR_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT: XrStructureType =
    1000019002;
pub const XrStructureType_XR_TYPE_DEBUG_UTILS_LABEL_EXT: XrStructureType = 1000019003;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_OPENGL_WIN32_KHR: XrStructureType = 1000023000;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_OPENGL_XLIB_KHR: XrStructureType = 1000023001;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_OPENGL_XCB_KHR: XrStructureType = 1000023002;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_OPENGL_WAYLAND_KHR: XrStructureType = 1000023003;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_OPENGL_KHR: XrStructureType = 1000023004;
pub const XrStructureType_XR_TYPE_GRAPHICS_REQUIREMENTS_OPENGL_KHR: XrStructureType = 1000023005;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_OPENGL_ES_ANDROID_KHR: XrStructureType =
    1000024001;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_OPENGL_ES_KHR: XrStructureType = 1000024002;
pub const XrStructureType_XR_TYPE_GRAPHICS_REQUIREMENTS_OPENGL_ES_KHR: XrStructureType = 1000024003;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_VULKAN_KHR: XrStructureType = 1000025000;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_VULKAN_KHR: XrStructureType = 1000025001;
pub const XrStructureType_XR_TYPE_GRAPHICS_REQUIREMENTS_VULKAN_KHR: XrStructureType = 1000025002;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_D3D11_KHR: XrStructureType = 1000027000;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_D3D11_KHR: XrStructureType = 1000027001;
pub const XrStructureType_XR_TYPE_GRAPHICS_REQUIREMENTS_D3D11_KHR: XrStructureType = 1000027002;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_D3D12_KHR: XrStructureType = 1000028000;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_D3D12_KHR: XrStructureType = 1000028001;
pub const XrStructureType_XR_TYPE_GRAPHICS_REQUIREMENTS_D3D12_KHR: XrStructureType = 1000028002;
pub const XrStructureType_XR_TYPE_SYSTEM_EYE_GAZE_INTERACTION_PROPERTIES_EXT: XrStructureType =
    1000030000;
pub const XrStructureType_XR_TYPE_EYE_GAZE_SAMPLE_TIME_EXT: XrStructureType = 1000030001;
pub const XrStructureType_XR_TYPE_VISIBILITY_MASK_KHR: XrStructureType = 1000031000;
pub const XrStructureType_XR_TYPE_EVENT_DATA_VISIBILITY_MASK_CHANGED_KHR: XrStructureType =
    1000031001;
pub const XrStructureType_XR_TYPE_SESSION_CREATE_INFO_OVERLAY_EXTX: XrStructureType = 1000033000;
pub const XrStructureType_XR_TYPE_EVENT_DATA_MAIN_SESSION_VISIBILITY_CHANGED_EXTX: XrStructureType =
    1000033003;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_COLOR_SCALE_BIAS_KHR: XrStructureType =
    1000034000;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_MSFT: XrStructureType = 1000039000;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHOR_SPACE_CREATE_INFO_MSFT: XrStructureType =
    1000039001;
pub const XrStructureType_XR_TYPE_VIEW_CONFIGURATION_DEPTH_RANGE_EXT: XrStructureType = 1000046000;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_EGL_MNDX: XrStructureType = 1000048004;
pub const XrStructureType_XR_TYPE_SPATIAL_GRAPH_NODE_SPACE_CREATE_INFO_MSFT: XrStructureType =
    1000049000;
pub const XrStructureType_XR_TYPE_SYSTEM_HAND_TRACKING_PROPERTIES_EXT: XrStructureType = 1000051000;
pub const XrStructureType_XR_TYPE_HAND_TRACKER_CREATE_INFO_EXT: XrStructureType = 1000051001;
pub const XrStructureType_XR_TYPE_HAND_JOINTS_LOCATE_INFO_EXT: XrStructureType = 1000051002;
pub const XrStructureType_XR_TYPE_HAND_JOINT_LOCATIONS_EXT: XrStructureType = 1000051003;
pub const XrStructureType_XR_TYPE_HAND_JOINT_VELOCITIES_EXT: XrStructureType = 1000051004;
pub const XrStructureType_XR_TYPE_SYSTEM_HAND_TRACKING_MESH_PROPERTIES_MSFT: XrStructureType =
    1000052000;
pub const XrStructureType_XR_TYPE_HAND_MESH_SPACE_CREATE_INFO_MSFT: XrStructureType = 1000052001;
pub const XrStructureType_XR_TYPE_HAND_MESH_UPDATE_INFO_MSFT: XrStructureType = 1000052002;
pub const XrStructureType_XR_TYPE_HAND_MESH_MSFT: XrStructureType = 1000052003;
pub const XrStructureType_XR_TYPE_HAND_POSE_TYPE_INFO_MSFT: XrStructureType = 1000052004;
pub const XrStructureType_XR_TYPE_SECONDARY_VIEW_CONFIGURATION_SESSION_BEGIN_INFO_MSFT:
    XrStructureType = 1000053000;
pub const XrStructureType_XR_TYPE_SECONDARY_VIEW_CONFIGURATION_STATE_MSFT: XrStructureType =
    1000053001;
pub const XrStructureType_XR_TYPE_SECONDARY_VIEW_CONFIGURATION_FRAME_STATE_MSFT: XrStructureType =
    1000053002;
pub const XrStructureType_XR_TYPE_SECONDARY_VIEW_CONFIGURATION_FRAME_END_INFO_MSFT:
    XrStructureType = 1000053003;
pub const XrStructureType_XR_TYPE_SECONDARY_VIEW_CONFIGURATION_LAYER_INFO_MSFT: XrStructureType =
    1000053004;
pub const XrStructureType_XR_TYPE_SECONDARY_VIEW_CONFIGURATION_SWAPCHAIN_CREATE_INFO_MSFT:
    XrStructureType = 1000053005;
pub const XrStructureType_XR_TYPE_CONTROLLER_MODEL_KEY_STATE_MSFT: XrStructureType = 1000055000;
pub const XrStructureType_XR_TYPE_CONTROLLER_MODEL_NODE_PROPERTIES_MSFT: XrStructureType =
    1000055001;
pub const XrStructureType_XR_TYPE_CONTROLLER_MODEL_PROPERTIES_MSFT: XrStructureType = 1000055002;
pub const XrStructureType_XR_TYPE_CONTROLLER_MODEL_NODE_STATE_MSFT: XrStructureType = 1000055003;
pub const XrStructureType_XR_TYPE_CONTROLLER_MODEL_STATE_MSFT: XrStructureType = 1000055004;
pub const XrStructureType_XR_TYPE_VIEW_CONFIGURATION_VIEW_FOV_EPIC: XrStructureType = 1000059000;
pub const XrStructureType_XR_TYPE_HOLOGRAPHIC_WINDOW_ATTACHMENT_MSFT: XrStructureType = 1000063000;
pub const XrStructureType_XR_TYPE_ANDROID_SURFACE_SWAPCHAIN_CREATE_INFO_FB: XrStructureType =
    1000070000;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_STATE_ANDROID_SURFACE_DIMENSIONS_FB: XrStructureType =
    1000071000;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_STATE_SAMPLER_OPENGL_ES_FB: XrStructureType =
    1000071001;
pub const XrStructureType_XR_TYPE_INTERACTION_PROFILE_ANALOG_THRESHOLD_VALVE: XrStructureType =
    1000079000;
pub const XrStructureType_XR_TYPE_HAND_JOINTS_MOTION_RANGE_INFO_EXT: XrStructureType = 1000080000;
pub const XrStructureType_XR_TYPE_LOADER_INIT_INFO_ANDROID_KHR: XrStructureType = 1000089000;
pub const XrStructureType_XR_TYPE_VULKAN_INSTANCE_CREATE_INFO_KHR: XrStructureType = 1000090000;
pub const XrStructureType_XR_TYPE_VULKAN_DEVICE_CREATE_INFO_KHR: XrStructureType = 1000090001;
pub const XrStructureType_XR_TYPE_VULKAN_GRAPHICS_DEVICE_GET_INFO_KHR: XrStructureType = 1000090003;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_EQUIRECT2_KHR: XrStructureType = 1000091000;
pub const XrStructureType_XR_TYPE_EVENT_DATA_DISPLAY_REFRESH_RATE_CHANGED_FB: XrStructureType =
    1000101000;
pub const XrStructureType_XR_TYPE_SYSTEM_COLOR_SPACE_PROPERTIES_FB: XrStructureType = 1000108000;
pub const XrStructureType_XR_TYPE_BINDING_MODIFICATIONS_KHR: XrStructureType = 1000120000;
pub const XrStructureType_XR_TYPE_VIEW_LOCATE_FOVEATED_RENDERING_VARJO: XrStructureType =
    1000121000;
pub const XrStructureType_XR_TYPE_FOVEATED_VIEW_CONFIGURATION_VIEW_VARJO: XrStructureType =
    1000121001;
pub const XrStructureType_XR_TYPE_SYSTEM_FOVEATED_RENDERING_PROPERTIES_VARJO: XrStructureType =
    1000121002;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_DEPTH_TEST_VARJO: XrStructureType = 1000122000;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_VULKAN2_KHR: XrStructureType = 1000025000;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_VULKAN2_KHR: XrStructureType = 1000025001;
pub const XrStructureType_XR_TYPE_GRAPHICS_REQUIREMENTS_VULKAN2_KHR: XrStructureType = 1000025002;
pub const XrStructureType_XR_STRUCTURE_TYPE_MAX_ENUM: XrStructureType = 2147483647;
pub type XrStructureType = i32;
pub const XrFormFactor_XR_FORM_FACTOR_HEAD_MOUNTED_DISPLAY: XrFormFactor = 1;
pub const XrFormFactor_XR_FORM_FACTOR_HANDHELD_DISPLAY: XrFormFactor = 2;
pub const XrFormFactor_XR_FORM_FACTOR_MAX_ENUM: XrFormFactor = 2147483647;
pub type XrFormFactor = i32;
pub const XrViewConfigurationType_XR_VIEW_CONFIGURATION_TYPE_PRIMARY_MONO: XrViewConfigurationType =
    1;
pub const XrViewConfigurationType_XR_VIEW_CONFIGURATION_TYPE_PRIMARY_STEREO:
    XrViewConfigurationType = 2;
pub const XrViewConfigurationType_XR_VIEW_CONFIGURATION_TYPE_PRIMARY_QUAD_VARJO:
    XrViewConfigurationType = 1000037000;
pub const XrViewConfigurationType_XR_VIEW_CONFIGURATION_TYPE_SECONDARY_MONO_FIRST_PERSON_OBSERVER_MSFT : XrViewConfigurationType = 1000054000 ;
pub const XrViewConfigurationType_XR_VIEW_CONFIGURATION_TYPE_MAX_ENUM: XrViewConfigurationType =
    2147483647;
pub type XrViewConfigurationType = i32;
pub const XrEnvironmentBlendMode_XR_ENVIRONMENT_BLEND_MODE_OPAQUE: XrEnvironmentBlendMode = 1;
pub const XrEnvironmentBlendMode_XR_ENVIRONMENT_BLEND_MODE_ADDITIVE: XrEnvironmentBlendMode = 2;
pub const XrEnvironmentBlendMode_XR_ENVIRONMENT_BLEND_MODE_ALPHA_BLEND: XrEnvironmentBlendMode = 3;
pub const XrEnvironmentBlendMode_XR_ENVIRONMENT_BLEND_MODE_MAX_ENUM: XrEnvironmentBlendMode =
    2147483647;
pub type XrEnvironmentBlendMode = i32;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_VIEW: XrReferenceSpaceType = 1;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_LOCAL: XrReferenceSpaceType = 2;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_STAGE: XrReferenceSpaceType = 3;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_UNBOUNDED_MSFT: XrReferenceSpaceType =
    1000038000;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_COMBINED_EYE_VARJO: XrReferenceSpaceType =
    1000121000;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_MAX_ENUM: XrReferenceSpaceType = 2147483647;
pub type XrReferenceSpaceType = i32;
pub const XrActionType_XR_ACTION_TYPE_BOOLEAN_INPUT: XrActionType = 1;
pub const XrActionType_XR_ACTION_TYPE_FLOAT_INPUT: XrActionType = 2;
pub const XrActionType_XR_ACTION_TYPE_VECTOR2F_INPUT: XrActionType = 3;
pub const XrActionType_XR_ACTION_TYPE_POSE_INPUT: XrActionType = 4;
pub const XrActionType_XR_ACTION_TYPE_VIBRATION_OUTPUT: XrActionType = 100;
pub const XrActionType_XR_ACTION_TYPE_MAX_ENUM: XrActionType = 2147483647;
pub type XrActionType = i32;
pub const XrEyeVisibility_XR_EYE_VISIBILITY_BOTH: XrEyeVisibility = 0;
pub const XrEyeVisibility_XR_EYE_VISIBILITY_LEFT: XrEyeVisibility = 1;
pub const XrEyeVisibility_XR_EYE_VISIBILITY_RIGHT: XrEyeVisibility = 2;
pub const XrEyeVisibility_XR_EYE_VISIBILITY_MAX_ENUM: XrEyeVisibility = 2147483647;
pub type XrEyeVisibility = i32;
pub const XrSessionState_XR_SESSION_STATE_UNKNOWN: XrSessionState = 0;
pub const XrSessionState_XR_SESSION_STATE_IDLE: XrSessionState = 1;
pub const XrSessionState_XR_SESSION_STATE_READY: XrSessionState = 2;
pub const XrSessionState_XR_SESSION_STATE_SYNCHRONIZED: XrSessionState = 3;
pub const XrSessionState_XR_SESSION_STATE_VISIBLE: XrSessionState = 4;
pub const XrSessionState_XR_SESSION_STATE_FOCUSED: XrSessionState = 5;
pub const XrSessionState_XR_SESSION_STATE_STOPPING: XrSessionState = 6;
pub const XrSessionState_XR_SESSION_STATE_LOSS_PENDING: XrSessionState = 7;
pub const XrSessionState_XR_SESSION_STATE_EXITING: XrSessionState = 8;
pub const XrSessionState_XR_SESSION_STATE_MAX_ENUM: XrSessionState = 2147483647;
pub type XrSessionState = i32;
pub const XrObjectType_XR_OBJECT_TYPE_UNKNOWN: XrObjectType = 0;
pub const XrObjectType_XR_OBJECT_TYPE_INSTANCE: XrObjectType = 1;
pub const XrObjectType_XR_OBJECT_TYPE_SESSION: XrObjectType = 2;
pub const XrObjectType_XR_OBJECT_TYPE_SWAPCHAIN: XrObjectType = 3;
pub const XrObjectType_XR_OBJECT_TYPE_SPACE: XrObjectType = 4;
pub const XrObjectType_XR_OBJECT_TYPE_ACTION_SET: XrObjectType = 5;
pub const XrObjectType_XR_OBJECT_TYPE_ACTION: XrObjectType = 6;
pub const XrObjectType_XR_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT: XrObjectType = 1000019000;
pub const XrObjectType_XR_OBJECT_TYPE_SPATIAL_ANCHOR_MSFT: XrObjectType = 1000039000;
pub const XrObjectType_XR_OBJECT_TYPE_HAND_TRACKER_EXT: XrObjectType = 1000051000;
pub const XrObjectType_XR_OBJECT_TYPE_MAX_ENUM: XrObjectType = 2147483647;
pub type XrObjectType = i32;
pub type XrInstanceCreateFlags = XrFlags64;
pub type XrSessionCreateFlags = XrFlags64;
pub type XrSpaceVelocityFlags = XrFlags64;
pub const XR_SPACE_VELOCITY_LINEAR_VALID_BIT: XrSpaceVelocityFlags = 1;
pub const XR_SPACE_VELOCITY_ANGULAR_VALID_BIT: XrSpaceVelocityFlags = 2;
pub type XrSpaceLocationFlags = XrFlags64;
pub const XR_SPACE_LOCATION_ORIENTATION_VALID_BIT: XrSpaceLocationFlags = 1;
pub const XR_SPACE_LOCATION_POSITION_VALID_BIT: XrSpaceLocationFlags = 2;
pub const XR_SPACE_LOCATION_ORIENTATION_TRACKED_BIT: XrSpaceLocationFlags = 4;
pub const XR_SPACE_LOCATION_POSITION_TRACKED_BIT: XrSpaceLocationFlags = 8;
pub type XrSwapchainCreateFlags = XrFlags64;
pub const XR_SWAPCHAIN_CREATE_PROTECTED_CONTENT_BIT: XrSwapchainCreateFlags = 1;
pub const XR_SWAPCHAIN_CREATE_STATIC_IMAGE_BIT: XrSwapchainCreateFlags = 2;
pub type XrSwapchainUsageFlags = XrFlags64;
pub const XR_SWAPCHAIN_USAGE_COLOR_ATTACHMENT_BIT: XrSwapchainUsageFlags = 1;
pub const XR_SWAPCHAIN_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT: XrSwapchainUsageFlags = 2;
pub const XR_SWAPCHAIN_USAGE_UNORDERED_ACCESS_BIT: XrSwapchainUsageFlags = 4;
pub const XR_SWAPCHAIN_USAGE_TRANSFER_SRC_BIT: XrSwapchainUsageFlags = 8;
pub const XR_SWAPCHAIN_USAGE_TRANSFER_DST_BIT: XrSwapchainUsageFlags = 16;
pub const XR_SWAPCHAIN_USAGE_SAMPLED_BIT: XrSwapchainUsageFlags = 32;
pub const XR_SWAPCHAIN_USAGE_MUTABLE_FORMAT_BIT: XrSwapchainUsageFlags = 64;
pub const XR_SWAPCHAIN_USAGE_INPUT_ATTACHMENT_BIT_MND: XrSwapchainUsageFlags = 128;
pub type XrCompositionLayerFlags = XrFlags64;
pub const XR_COMPOSITION_LAYER_CORRECT_CHROMATIC_ABERRATION_BIT: XrCompositionLayerFlags = 1;
pub const XR_COMPOSITION_LAYER_BLEND_TEXTURE_SOURCE_ALPHA_BIT: XrCompositionLayerFlags = 2;
pub const XR_COMPOSITION_LAYER_UNPREMULTIPLIED_ALPHA_BIT: XrCompositionLayerFlags = 4;
pub type XrViewStateFlags = XrFlags64;
pub const XR_VIEW_STATE_ORIENTATION_VALID_BIT: XrViewStateFlags = 1;
pub const XR_VIEW_STATE_POSITION_VALID_BIT: XrViewStateFlags = 2;
pub const XR_VIEW_STATE_ORIENTATION_TRACKED_BIT: XrViewStateFlags = 4;
pub const XR_VIEW_STATE_POSITION_TRACKED_BIT: XrViewStateFlags = 8;
pub type XrInputSourceLocalizedNameFlags = XrFlags64;
pub const XR_INPUT_SOURCE_LOCALIZED_NAME_USER_PATH_BIT: XrInputSourceLocalizedNameFlags = 1;
pub const XR_INPUT_SOURCE_LOCALIZED_NAME_INTERACTION_PROFILE_BIT: XrInputSourceLocalizedNameFlags =
    2;
pub const XR_INPUT_SOURCE_LOCALIZED_NAME_COMPONENT_BIT: XrInputSourceLocalizedNameFlags = 4;
pub type PFN_xrVoidFunction = ::std::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XrApiLayerProperties {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub layerName: [::std::os::raw::c_char; 256usize],
    pub specVersion: XrVersion,
    pub layerVersion: u32,
    pub description: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_XrApiLayerProperties() {
    assert_eq!(
        ::std::mem::size_of::<XrApiLayerProperties>(),
        544usize,
        concat!("Size of: ", stringify!(XrApiLayerProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<XrApiLayerProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(XrApiLayerProperties))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrApiLayerProperties>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerProperties),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrApiLayerProperties>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerProperties),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrApiLayerProperties>())).layerName as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerProperties),
            "::",
            stringify!(layerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrApiLayerProperties>())).specVersion as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerProperties),
            "::",
            stringify!(specVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrApiLayerProperties>())).layerVersion as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerProperties),
            "::",
            stringify!(layerVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrApiLayerProperties>())).description as *const _ as usize
        },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerProperties),
            "::",
            stringify!(description)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XrExtensionProperties {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub extensionName: [::std::os::raw::c_char; 128usize],
    pub extensionVersion: u32,
}
#[test]
fn bindgen_test_layout_XrExtensionProperties() {
    assert_eq!(
        ::std::mem::size_of::<XrExtensionProperties>(),
        152usize,
        concat!("Size of: ", stringify!(XrExtensionProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<XrExtensionProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(XrExtensionProperties))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrExtensionProperties>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExtensionProperties),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrExtensionProperties>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExtensionProperties),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrExtensionProperties>())).extensionName as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExtensionProperties),
            "::",
            stringify!(extensionName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrExtensionProperties>())).extensionVersion as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExtensionProperties),
            "::",
            stringify!(extensionVersion)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XrApplicationInfo {
    pub applicationName: [::std::os::raw::c_char; 128usize],
    pub applicationVersion: u32,
    pub engineName: [::std::os::raw::c_char; 128usize],
    pub engineVersion: u32,
    pub apiVersion: XrVersion,
}
#[test]
fn bindgen_test_layout_XrApplicationInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrApplicationInfo>(),
        272usize,
        concat!("Size of: ", stringify!(XrApplicationInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrApplicationInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrApplicationInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrApplicationInfo>())).applicationName as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApplicationInfo),
            "::",
            stringify!(applicationName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrApplicationInfo>())).applicationVersion as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApplicationInfo),
            "::",
            stringify!(applicationVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrApplicationInfo>())).engineName as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApplicationInfo),
            "::",
            stringify!(engineName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrApplicationInfo>())).engineVersion as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApplicationInfo),
            "::",
            stringify!(engineVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrApplicationInfo>())).apiVersion as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApplicationInfo),
            "::",
            stringify!(apiVersion)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XrInstanceCreateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub createFlags: XrInstanceCreateFlags,
    pub applicationInfo: XrApplicationInfo,
    pub enabledApiLayerCount: u32,
    pub enabledApiLayerNames: *const *const ::std::os::raw::c_char,
    pub enabledExtensionCount: u32,
    pub enabledExtensionNames: *const *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_XrInstanceCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrInstanceCreateInfo>(),
        328usize,
        concat!("Size of: ", stringify!(XrInstanceCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrInstanceCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrInstanceCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrInstanceCreateInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceCreateInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrInstanceCreateInfo>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceCreateInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInstanceCreateInfo>())).createFlags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceCreateInfo),
            "::",
            stringify!(createFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInstanceCreateInfo>())).applicationInfo as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceCreateInfo),
            "::",
            stringify!(applicationInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInstanceCreateInfo>())).enabledApiLayerCount as *const _
                as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceCreateInfo),
            "::",
            stringify!(enabledApiLayerCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInstanceCreateInfo>())).enabledApiLayerNames as *const _
                as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceCreateInfo),
            "::",
            stringify!(enabledApiLayerNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInstanceCreateInfo>())).enabledExtensionCount as *const _
                as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceCreateInfo),
            "::",
            stringify!(enabledExtensionCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInstanceCreateInfo>())).enabledExtensionNames as *const _
                as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceCreateInfo),
            "::",
            stringify!(enabledExtensionNames)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XrInstanceProperties {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub runtimeVersion: XrVersion,
    pub runtimeName: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_XrInstanceProperties() {
    assert_eq!(
        ::std::mem::size_of::<XrInstanceProperties>(),
        152usize,
        concat!("Size of: ", stringify!(XrInstanceProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<XrInstanceProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(XrInstanceProperties))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrInstanceProperties>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceProperties),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrInstanceProperties>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceProperties),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInstanceProperties>())).runtimeVersion as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceProperties),
            "::",
            stringify!(runtimeVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInstanceProperties>())).runtimeName as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInstanceProperties),
            "::",
            stringify!(runtimeName)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XrEventDataBuffer {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub varying: [u8; 4000usize],
}
#[test]
fn bindgen_test_layout_XrEventDataBuffer() {
    assert_eq!(
        ::std::mem::size_of::<XrEventDataBuffer>(),
        4016usize,
        concat!("Size of: ", stringify!(XrEventDataBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEventDataBuffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrEventDataBuffer>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataBuffer),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrEventDataBuffer>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataBuffer),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrEventDataBuffer>())).varying as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataBuffer),
            "::",
            stringify!(varying)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemGetInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub formFactor: XrFormFactor,
}
#[test]
fn bindgen_test_layout_XrSystemGetInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrSystemGetInfo>(),
        24usize,
        concat!("Size of: ", stringify!(XrSystemGetInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemGetInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSystemGetInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSystemGetInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemGetInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSystemGetInfo>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemGetInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSystemGetInfo>())).formFactor as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemGetInfo),
            "::",
            stringify!(formFactor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemGraphicsProperties {
    pub maxSwapchainImageHeight: u32,
    pub maxSwapchainImageWidth: u32,
    pub maxLayerCount: u32,
}
#[test]
fn bindgen_test_layout_XrSystemGraphicsProperties() {
    assert_eq!(
        ::std::mem::size_of::<XrSystemGraphicsProperties>(),
        12usize,
        concat!("Size of: ", stringify!(XrSystemGraphicsProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemGraphicsProperties>(),
        4usize,
        concat!("Alignment of ", stringify!(XrSystemGraphicsProperties))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemGraphicsProperties>())).maxSwapchainImageHeight
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemGraphicsProperties),
            "::",
            stringify!(maxSwapchainImageHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemGraphicsProperties>())).maxSwapchainImageWidth
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemGraphicsProperties),
            "::",
            stringify!(maxSwapchainImageWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemGraphicsProperties>())).maxLayerCount as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemGraphicsProperties),
            "::",
            stringify!(maxLayerCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemTrackingProperties {
    pub orientationTracking: XrBool32,
    pub positionTracking: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemTrackingProperties() {
    assert_eq!(
        ::std::mem::size_of::<XrSystemTrackingProperties>(),
        8usize,
        concat!("Size of: ", stringify!(XrSystemTrackingProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemTrackingProperties>(),
        4usize,
        concat!("Alignment of ", stringify!(XrSystemTrackingProperties))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemTrackingProperties>())).orientationTracking as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemTrackingProperties),
            "::",
            stringify!(orientationTracking)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemTrackingProperties>())).positionTracking as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemTrackingProperties),
            "::",
            stringify!(positionTracking)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XrSystemProperties {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub systemId: XrSystemId,
    pub vendorId: u32,
    pub systemName: [::std::os::raw::c_char; 256usize],
    pub graphicsProperties: XrSystemGraphicsProperties,
    pub trackingProperties: XrSystemTrackingProperties,
}
#[test]
fn bindgen_test_layout_XrSystemProperties() {
    assert_eq!(
        ::std::mem::size_of::<XrSystemProperties>(),
        304usize,
        concat!("Size of: ", stringify!(XrSystemProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSystemProperties))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSystemProperties>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemProperties),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSystemProperties>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemProperties),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSystemProperties>())).systemId as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemProperties),
            "::",
            stringify!(systemId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSystemProperties>())).vendorId as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemProperties),
            "::",
            stringify!(vendorId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSystemProperties>())).systemName as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemProperties),
            "::",
            stringify!(systemName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemProperties>())).graphicsProperties as *const _ as usize
        },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemProperties),
            "::",
            stringify!(graphicsProperties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemProperties>())).trackingProperties as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemProperties),
            "::",
            stringify!(trackingProperties)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSessionCreateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub createFlags: XrSessionCreateFlags,
    pub systemId: XrSystemId,
}
#[test]
fn bindgen_test_layout_XrSessionCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrSessionCreateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(XrSessionCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSessionCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSessionCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSessionCreateInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionCreateInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSessionCreateInfo>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionCreateInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSessionCreateInfo>())).createFlags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionCreateInfo),
            "::",
            stringify!(createFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSessionCreateInfo>())).systemId as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionCreateInfo),
            "::",
            stringify!(systemId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVector3f {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout_XrVector3f() {
    assert_eq!(
        ::std::mem::size_of::<XrVector3f>(),
        12usize,
        concat!("Size of: ", stringify!(XrVector3f))
    );
    assert_eq!(
        ::std::mem::align_of::<XrVector3f>(),
        4usize,
        concat!("Alignment of ", stringify!(XrVector3f))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrVector3f>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVector3f),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrVector3f>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVector3f),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrVector3f>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVector3f),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceVelocity {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub velocityFlags: XrSpaceVelocityFlags,
    pub linearVelocity: XrVector3f,
    pub angularVelocity: XrVector3f,
}
#[test]
fn bindgen_test_layout_XrSpaceVelocity() {
    assert_eq!(
        ::std::mem::size_of::<XrSpaceVelocity>(),
        48usize,
        concat!("Size of: ", stringify!(XrSpaceVelocity))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceVelocity>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceVelocity))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSpaceVelocity>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceVelocity),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSpaceVelocity>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceVelocity),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSpaceVelocity>())).velocityFlags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceVelocity),
            "::",
            stringify!(velocityFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSpaceVelocity>())).linearVelocity as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceVelocity),
            "::",
            stringify!(linearVelocity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSpaceVelocity>())).angularVelocity as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceVelocity),
            "::",
            stringify!(angularVelocity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrQuaternionf {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout_XrQuaternionf() {
    assert_eq!(
        ::std::mem::size_of::<XrQuaternionf>(),
        16usize,
        concat!("Size of: ", stringify!(XrQuaternionf))
    );
    assert_eq!(
        ::std::mem::align_of::<XrQuaternionf>(),
        4usize,
        concat!("Alignment of ", stringify!(XrQuaternionf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrQuaternionf>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrQuaternionf),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrQuaternionf>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrQuaternionf),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrQuaternionf>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrQuaternionf),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrQuaternionf>())).w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XrQuaternionf),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPosef {
    pub orientation: XrQuaternionf,
    pub position: XrVector3f,
}
#[test]
fn bindgen_test_layout_XrPosef() {
    assert_eq!(
        ::std::mem::size_of::<XrPosef>(),
        28usize,
        concat!("Size of: ", stringify!(XrPosef))
    );
    assert_eq!(
        ::std::mem::align_of::<XrPosef>(),
        4usize,
        concat!("Alignment of ", stringify!(XrPosef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrPosef>())).orientation as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPosef),
            "::",
            stringify!(orientation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrPosef>())).position as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrPosef),
            "::",
            stringify!(position)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrReferenceSpaceCreateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub referenceSpaceType: XrReferenceSpaceType,
    pub poseInReferenceSpace: XrPosef,
}
#[test]
fn bindgen_test_layout_XrReferenceSpaceCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrReferenceSpaceCreateInfo>(),
        48usize,
        concat!("Size of: ", stringify!(XrReferenceSpaceCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrReferenceSpaceCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrReferenceSpaceCreateInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrReferenceSpaceCreateInfo>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrReferenceSpaceCreateInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrReferenceSpaceCreateInfo>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrReferenceSpaceCreateInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrReferenceSpaceCreateInfo>())).referenceSpaceType as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrReferenceSpaceCreateInfo),
            "::",
            stringify!(referenceSpaceType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrReferenceSpaceCreateInfo>())).poseInReferenceSpace as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrReferenceSpaceCreateInfo),
            "::",
            stringify!(poseInReferenceSpace)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrExtent2Df {
    pub width: f32,
    pub height: f32,
}
#[test]
fn bindgen_test_layout_XrExtent2Df() {
    assert_eq!(
        ::std::mem::size_of::<XrExtent2Df>(),
        8usize,
        concat!("Size of: ", stringify!(XrExtent2Df))
    );
    assert_eq!(
        ::std::mem::align_of::<XrExtent2Df>(),
        4usize,
        concat!("Alignment of ", stringify!(XrExtent2Df))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrExtent2Df>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExtent2Df),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrExtent2Df>())).height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExtent2Df),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionSpaceCreateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub action: XrAction,
    pub subactionPath: XrPath,
    pub poseInActionSpace: XrPosef,
}
#[test]
fn bindgen_test_layout_XrActionSpaceCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrActionSpaceCreateInfo>(),
        64usize,
        concat!("Size of: ", stringify!(XrActionSpaceCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActionSpaceCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActionSpaceCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionSpaceCreateInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSpaceCreateInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionSpaceCreateInfo>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSpaceCreateInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionSpaceCreateInfo>())).action as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSpaceCreateInfo),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrActionSpaceCreateInfo>())).subactionPath as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSpaceCreateInfo),
            "::",
            stringify!(subactionPath)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrActionSpaceCreateInfo>())).poseInActionSpace as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSpaceCreateInfo),
            "::",
            stringify!(poseInActionSpace)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceLocation {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub locationFlags: XrSpaceLocationFlags,
    pub pose: XrPosef,
}
#[test]
fn bindgen_test_layout_XrSpaceLocation() {
    assert_eq!(
        ::std::mem::size_of::<XrSpaceLocation>(),
        56usize,
        concat!("Size of: ", stringify!(XrSpaceLocation))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpaceLocation>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpaceLocation))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSpaceLocation>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceLocation),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSpaceLocation>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceLocation),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSpaceLocation>())).locationFlags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceLocation),
            "::",
            stringify!(locationFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSpaceLocation>())).pose as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpaceLocation),
            "::",
            stringify!(pose)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrViewConfigurationProperties {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub viewConfigurationType: XrViewConfigurationType,
    pub fovMutable: XrBool32,
}
#[test]
fn bindgen_test_layout_XrViewConfigurationProperties() {
    assert_eq!(
        ::std::mem::size_of::<XrViewConfigurationProperties>(),
        24usize,
        concat!("Size of: ", stringify!(XrViewConfigurationProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<XrViewConfigurationProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(XrViewConfigurationProperties))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewConfigurationProperties>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationProperties),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewConfigurationProperties>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationProperties),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewConfigurationProperties>())).viewConfigurationType
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationProperties),
            "::",
            stringify!(viewConfigurationType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewConfigurationProperties>())).fovMutable as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationProperties),
            "::",
            stringify!(fovMutable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrViewConfigurationView {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub recommendedImageRectWidth: u32,
    pub maxImageRectWidth: u32,
    pub recommendedImageRectHeight: u32,
    pub maxImageRectHeight: u32,
    pub recommendedSwapchainSampleCount: u32,
    pub maxSwapchainSampleCount: u32,
}
#[test]
fn bindgen_test_layout_XrViewConfigurationView() {
    assert_eq!(
        ::std::mem::size_of::<XrViewConfigurationView>(),
        40usize,
        concat!("Size of: ", stringify!(XrViewConfigurationView))
    );
    assert_eq!(
        ::std::mem::align_of::<XrViewConfigurationView>(),
        8usize,
        concat!("Alignment of ", stringify!(XrViewConfigurationView))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrViewConfigurationView>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationView),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrViewConfigurationView>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationView),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewConfigurationView>())).recommendedImageRectWidth
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationView),
            "::",
            stringify!(recommendedImageRectWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewConfigurationView>())).maxImageRectWidth as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationView),
            "::",
            stringify!(maxImageRectWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewConfigurationView>())).recommendedImageRectHeight
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationView),
            "::",
            stringify!(recommendedImageRectHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewConfigurationView>())).maxImageRectHeight as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationView),
            "::",
            stringify!(maxImageRectHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewConfigurationView>())).recommendedSwapchainSampleCount
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationView),
            "::",
            stringify!(recommendedSwapchainSampleCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewConfigurationView>())).maxSwapchainSampleCount as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationView),
            "::",
            stringify!(maxSwapchainSampleCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainCreateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub createFlags: XrSwapchainCreateFlags,
    pub usageFlags: XrSwapchainUsageFlags,
    pub format: i64,
    pub sampleCount: u32,
    pub width: u32,
    pub height: u32,
    pub faceCount: u32,
    pub arraySize: u32,
    pub mipCount: u32,
}
#[test]
fn bindgen_test_layout_XrSwapchainCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrSwapchainCreateInfo>(),
        64usize,
        concat!("Size of: ", stringify!(XrSwapchainCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSwapchainCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSwapchainCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSwapchainCreateInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSwapchainCreateInfo>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSwapchainCreateInfo>())).createFlags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfo),
            "::",
            stringify!(createFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSwapchainCreateInfo>())).usageFlags as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfo),
            "::",
            stringify!(usageFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSwapchainCreateInfo>())).format as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfo),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSwapchainCreateInfo>())).sampleCount as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfo),
            "::",
            stringify!(sampleCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSwapchainCreateInfo>())).width as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfo),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSwapchainCreateInfo>())).height as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfo),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSwapchainCreateInfo>())).faceCount as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfo),
            "::",
            stringify!(faceCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSwapchainCreateInfo>())).arraySize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfo),
            "::",
            stringify!(arraySize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSwapchainCreateInfo>())).mipCount as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainCreateInfo),
            "::",
            stringify!(mipCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainImageBaseHeader {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrSwapchainImageBaseHeader() {
    assert_eq!(
        ::std::mem::size_of::<XrSwapchainImageBaseHeader>(),
        16usize,
        concat!("Size of: ", stringify!(XrSwapchainImageBaseHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSwapchainImageBaseHeader>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSwapchainImageBaseHeader))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSwapchainImageBaseHeader>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainImageBaseHeader),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSwapchainImageBaseHeader>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainImageBaseHeader),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainImageAcquireInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrSwapchainImageAcquireInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrSwapchainImageAcquireInfo>(),
        16usize,
        concat!("Size of: ", stringify!(XrSwapchainImageAcquireInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSwapchainImageAcquireInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSwapchainImageAcquireInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSwapchainImageAcquireInfo>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainImageAcquireInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSwapchainImageAcquireInfo>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainImageAcquireInfo),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainImageWaitInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub timeout: XrDuration,
}
#[test]
fn bindgen_test_layout_XrSwapchainImageWaitInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrSwapchainImageWaitInfo>(),
        24usize,
        concat!("Size of: ", stringify!(XrSwapchainImageWaitInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSwapchainImageWaitInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSwapchainImageWaitInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSwapchainImageWaitInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainImageWaitInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSwapchainImageWaitInfo>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainImageWaitInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSwapchainImageWaitInfo>())).timeout as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainImageWaitInfo),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainImageReleaseInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrSwapchainImageReleaseInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrSwapchainImageReleaseInfo>(),
        16usize,
        concat!("Size of: ", stringify!(XrSwapchainImageReleaseInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSwapchainImageReleaseInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSwapchainImageReleaseInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSwapchainImageReleaseInfo>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainImageReleaseInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSwapchainImageReleaseInfo>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainImageReleaseInfo),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSessionBeginInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub primaryViewConfigurationType: XrViewConfigurationType,
}
#[test]
fn bindgen_test_layout_XrSessionBeginInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrSessionBeginInfo>(),
        24usize,
        concat!("Size of: ", stringify!(XrSessionBeginInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSessionBeginInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSessionBeginInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSessionBeginInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionBeginInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSessionBeginInfo>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionBeginInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSessionBeginInfo>())).primaryViewConfigurationType as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionBeginInfo),
            "::",
            stringify!(primaryViewConfigurationType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFrameWaitInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrFrameWaitInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrFrameWaitInfo>(),
        16usize,
        concat!("Size of: ", stringify!(XrFrameWaitInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFrameWaitInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFrameWaitInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrFrameWaitInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameWaitInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrFrameWaitInfo>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameWaitInfo),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFrameState {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub predictedDisplayTime: XrTime,
    pub predictedDisplayPeriod: XrDuration,
    pub shouldRender: XrBool32,
}
#[test]
fn bindgen_test_layout_XrFrameState() {
    assert_eq!(
        ::std::mem::size_of::<XrFrameState>(),
        40usize,
        concat!("Size of: ", stringify!(XrFrameState))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFrameState>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFrameState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrFrameState>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrFrameState>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameState),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrFrameState>())).predictedDisplayTime as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameState),
            "::",
            stringify!(predictedDisplayTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrFrameState>())).predictedDisplayPeriod as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameState),
            "::",
            stringify!(predictedDisplayPeriod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrFrameState>())).shouldRender as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameState),
            "::",
            stringify!(shouldRender)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFrameBeginInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrFrameBeginInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrFrameBeginInfo>(),
        16usize,
        concat!("Size of: ", stringify!(XrFrameBeginInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFrameBeginInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFrameBeginInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrFrameBeginInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameBeginInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrFrameBeginInfo>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameBeginInfo),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerBaseHeader {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerFlags,
    pub space: XrSpace,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerBaseHeader() {
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerBaseHeader>(),
        32usize,
        concat!("Size of: ", stringify!(XrCompositionLayerBaseHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerBaseHeader>(),
        8usize,
        concat!("Alignment of ", stringify!(XrCompositionLayerBaseHeader))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerBaseHeader>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerBaseHeader),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerBaseHeader>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerBaseHeader),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerBaseHeader>())).layerFlags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerBaseHeader),
            "::",
            stringify!(layerFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerBaseHeader>())).space as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerBaseHeader),
            "::",
            stringify!(space)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFrameEndInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub displayTime: XrTime,
    pub environmentBlendMode: XrEnvironmentBlendMode,
    pub layerCount: u32,
    pub layers: *const *const XrCompositionLayerBaseHeader,
}
#[test]
fn bindgen_test_layout_XrFrameEndInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrFrameEndInfo>(),
        40usize,
        concat!("Size of: ", stringify!(XrFrameEndInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFrameEndInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrFrameEndInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrFrameEndInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameEndInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrFrameEndInfo>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameEndInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrFrameEndInfo>())).displayTime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameEndInfo),
            "::",
            stringify!(displayTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrFrameEndInfo>())).environmentBlendMode as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameEndInfo),
            "::",
            stringify!(environmentBlendMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrFrameEndInfo>())).layerCount as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameEndInfo),
            "::",
            stringify!(layerCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrFrameEndInfo>())).layers as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFrameEndInfo),
            "::",
            stringify!(layers)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrViewLocateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub viewConfigurationType: XrViewConfigurationType,
    pub displayTime: XrTime,
    pub space: XrSpace,
}
#[test]
fn bindgen_test_layout_XrViewLocateInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrViewLocateInfo>(),
        40usize,
        concat!("Size of: ", stringify!(XrViewLocateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrViewLocateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrViewLocateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrViewLocateInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewLocateInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrViewLocateInfo>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewLocateInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewLocateInfo>())).viewConfigurationType as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewLocateInfo),
            "::",
            stringify!(viewConfigurationType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrViewLocateInfo>())).displayTime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewLocateInfo),
            "::",
            stringify!(displayTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrViewLocateInfo>())).space as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewLocateInfo),
            "::",
            stringify!(space)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrViewState {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub viewStateFlags: XrViewStateFlags,
}
#[test]
fn bindgen_test_layout_XrViewState() {
    assert_eq!(
        ::std::mem::size_of::<XrViewState>(),
        24usize,
        concat!("Size of: ", stringify!(XrViewState))
    );
    assert_eq!(
        ::std::mem::align_of::<XrViewState>(),
        8usize,
        concat!("Alignment of ", stringify!(XrViewState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrViewState>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrViewState>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewState),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrViewState>())).viewStateFlags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewState),
            "::",
            stringify!(viewStateFlags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFovf {
    pub angleLeft: f32,
    pub angleRight: f32,
    pub angleUp: f32,
    pub angleDown: f32,
}
#[test]
fn bindgen_test_layout_XrFovf() {
    assert_eq!(
        ::std::mem::size_of::<XrFovf>(),
        16usize,
        concat!("Size of: ", stringify!(XrFovf))
    );
    assert_eq!(
        ::std::mem::align_of::<XrFovf>(),
        4usize,
        concat!("Alignment of ", stringify!(XrFovf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrFovf>())).angleLeft as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFovf),
            "::",
            stringify!(angleLeft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrFovf>())).angleRight as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFovf),
            "::",
            stringify!(angleRight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrFovf>())).angleUp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFovf),
            "::",
            stringify!(angleUp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrFovf>())).angleDown as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFovf),
            "::",
            stringify!(angleDown)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrView {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub pose: XrPosef,
    pub fov: XrFovf,
}
#[test]
fn bindgen_test_layout_XrView() {
    assert_eq!(
        ::std::mem::size_of::<XrView>(),
        64usize,
        concat!("Size of: ", stringify!(XrView))
    );
    assert_eq!(
        ::std::mem::align_of::<XrView>(),
        8usize,
        concat!("Alignment of ", stringify!(XrView))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrView>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrView),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrView>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrView),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrView>())).pose as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrView),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrView>())).fov as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XrView),
            "::",
            stringify!(fov)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XrActionSetCreateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub actionSetName: [::std::os::raw::c_char; 64usize],
    pub localizedActionSetName: [::std::os::raw::c_char; 128usize],
    pub priority: u32,
}
#[test]
fn bindgen_test_layout_XrActionSetCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrActionSetCreateInfo>(),
        216usize,
        concat!("Size of: ", stringify!(XrActionSetCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActionSetCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActionSetCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionSetCreateInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSetCreateInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionSetCreateInfo>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSetCreateInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrActionSetCreateInfo>())).actionSetName as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSetCreateInfo),
            "::",
            stringify!(actionSetName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrActionSetCreateInfo>())).localizedActionSetName as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSetCreateInfo),
            "::",
            stringify!(localizedActionSetName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionSetCreateInfo>())).priority as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSetCreateInfo),
            "::",
            stringify!(priority)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XrActionCreateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub actionName: [::std::os::raw::c_char; 64usize],
    pub actionType: XrActionType,
    pub countSubactionPaths: u32,
    pub subactionPaths: *const XrPath,
    pub localizedActionName: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_XrActionCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrActionCreateInfo>(),
        224usize,
        concat!("Size of: ", stringify!(XrActionCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActionCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActionCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionCreateInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionCreateInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionCreateInfo>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionCreateInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionCreateInfo>())).actionName as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionCreateInfo),
            "::",
            stringify!(actionName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionCreateInfo>())).actionType as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionCreateInfo),
            "::",
            stringify!(actionType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrActionCreateInfo>())).countSubactionPaths as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionCreateInfo),
            "::",
            stringify!(countSubactionPaths)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrActionCreateInfo>())).subactionPaths as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionCreateInfo),
            "::",
            stringify!(subactionPaths)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrActionCreateInfo>())).localizedActionName as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionCreateInfo),
            "::",
            stringify!(localizedActionName)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionSuggestedBinding {
    pub action: XrAction,
    pub binding: XrPath,
}
#[test]
fn bindgen_test_layout_XrActionSuggestedBinding() {
    assert_eq!(
        ::std::mem::size_of::<XrActionSuggestedBinding>(),
        16usize,
        concat!("Size of: ", stringify!(XrActionSuggestedBinding))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActionSuggestedBinding>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActionSuggestedBinding))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionSuggestedBinding>())).action as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSuggestedBinding),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrActionSuggestedBinding>())).binding as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionSuggestedBinding),
            "::",
            stringify!(binding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrInteractionProfileSuggestedBinding {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub interactionProfile: XrPath,
    pub countSuggestedBindings: u32,
    pub suggestedBindings: *const XrActionSuggestedBinding,
}
#[test]
fn bindgen_test_layout_XrInteractionProfileSuggestedBinding() {
    assert_eq!(
        ::std::mem::size_of::<XrInteractionProfileSuggestedBinding>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(XrInteractionProfileSuggestedBinding)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrInteractionProfileSuggestedBinding>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrInteractionProfileSuggestedBinding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInteractionProfileSuggestedBinding>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileSuggestedBinding),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInteractionProfileSuggestedBinding>())).next as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileSuggestedBinding),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInteractionProfileSuggestedBinding>())).interactionProfile
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileSuggestedBinding),
            "::",
            stringify!(interactionProfile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInteractionProfileSuggestedBinding>())).countSuggestedBindings
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileSuggestedBinding),
            "::",
            stringify!(countSuggestedBindings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInteractionProfileSuggestedBinding>())).suggestedBindings
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileSuggestedBinding),
            "::",
            stringify!(suggestedBindings)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSessionActionSetsAttachInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub countActionSets: u32,
    pub actionSets: *const XrActionSet,
}
#[test]
fn bindgen_test_layout_XrSessionActionSetsAttachInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrSessionActionSetsAttachInfo>(),
        32usize,
        concat!("Size of: ", stringify!(XrSessionActionSetsAttachInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSessionActionSetsAttachInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSessionActionSetsAttachInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSessionActionSetsAttachInfo>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionActionSetsAttachInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSessionActionSetsAttachInfo>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionActionSetsAttachInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSessionActionSetsAttachInfo>())).countActionSets as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionActionSetsAttachInfo),
            "::",
            stringify!(countActionSets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSessionActionSetsAttachInfo>())).actionSets as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionActionSetsAttachInfo),
            "::",
            stringify!(actionSets)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrInteractionProfileState {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub interactionProfile: XrPath,
}
#[test]
fn bindgen_test_layout_XrInteractionProfileState() {
    assert_eq!(
        ::std::mem::size_of::<XrInteractionProfileState>(),
        24usize,
        concat!("Size of: ", stringify!(XrInteractionProfileState))
    );
    assert_eq!(
        ::std::mem::align_of::<XrInteractionProfileState>(),
        8usize,
        concat!("Alignment of ", stringify!(XrInteractionProfileState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrInteractionProfileState>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrInteractionProfileState>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileState),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInteractionProfileState>())).interactionProfile as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileState),
            "::",
            stringify!(interactionProfile)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionStateGetInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub action: XrAction,
    pub subactionPath: XrPath,
}
#[test]
fn bindgen_test_layout_XrActionStateGetInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrActionStateGetInfo>(),
        32usize,
        concat!("Size of: ", stringify!(XrActionStateGetInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActionStateGetInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActionStateGetInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionStateGetInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateGetInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionStateGetInfo>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateGetInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionStateGetInfo>())).action as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateGetInfo),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrActionStateGetInfo>())).subactionPath as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateGetInfo),
            "::",
            stringify!(subactionPath)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionStateBoolean {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub currentState: XrBool32,
    pub changedSinceLastSync: XrBool32,
    pub lastChangeTime: XrTime,
    pub isActive: XrBool32,
}
#[test]
fn bindgen_test_layout_XrActionStateBoolean() {
    assert_eq!(
        ::std::mem::size_of::<XrActionStateBoolean>(),
        40usize,
        concat!("Size of: ", stringify!(XrActionStateBoolean))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActionStateBoolean>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActionStateBoolean))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionStateBoolean>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateBoolean),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionStateBoolean>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateBoolean),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrActionStateBoolean>())).currentState as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateBoolean),
            "::",
            stringify!(currentState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrActionStateBoolean>())).changedSinceLastSync as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateBoolean),
            "::",
            stringify!(changedSinceLastSync)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrActionStateBoolean>())).lastChangeTime as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateBoolean),
            "::",
            stringify!(lastChangeTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionStateBoolean>())).isActive as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateBoolean),
            "::",
            stringify!(isActive)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionStateFloat {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub currentState: f32,
    pub changedSinceLastSync: XrBool32,
    pub lastChangeTime: XrTime,
    pub isActive: XrBool32,
}
#[test]
fn bindgen_test_layout_XrActionStateFloat() {
    assert_eq!(
        ::std::mem::size_of::<XrActionStateFloat>(),
        40usize,
        concat!("Size of: ", stringify!(XrActionStateFloat))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActionStateFloat>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActionStateFloat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionStateFloat>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateFloat),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionStateFloat>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateFloat),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionStateFloat>())).currentState as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateFloat),
            "::",
            stringify!(currentState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrActionStateFloat>())).changedSinceLastSync as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateFloat),
            "::",
            stringify!(changedSinceLastSync)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrActionStateFloat>())).lastChangeTime as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateFloat),
            "::",
            stringify!(lastChangeTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionStateFloat>())).isActive as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateFloat),
            "::",
            stringify!(isActive)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVector2f {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_XrVector2f() {
    assert_eq!(
        ::std::mem::size_of::<XrVector2f>(),
        8usize,
        concat!("Size of: ", stringify!(XrVector2f))
    );
    assert_eq!(
        ::std::mem::align_of::<XrVector2f>(),
        4usize,
        concat!("Alignment of ", stringify!(XrVector2f))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrVector2f>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVector2f),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrVector2f>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVector2f),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionStateVector2f {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub currentState: XrVector2f,
    pub changedSinceLastSync: XrBool32,
    pub lastChangeTime: XrTime,
    pub isActive: XrBool32,
}
#[test]
fn bindgen_test_layout_XrActionStateVector2f() {
    assert_eq!(
        ::std::mem::size_of::<XrActionStateVector2f>(),
        48usize,
        concat!("Size of: ", stringify!(XrActionStateVector2f))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActionStateVector2f>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActionStateVector2f))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionStateVector2f>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateVector2f),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionStateVector2f>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateVector2f),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrActionStateVector2f>())).currentState as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateVector2f),
            "::",
            stringify!(currentState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrActionStateVector2f>())).changedSinceLastSync as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateVector2f),
            "::",
            stringify!(changedSinceLastSync)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrActionStateVector2f>())).lastChangeTime as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateVector2f),
            "::",
            stringify!(lastChangeTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionStateVector2f>())).isActive as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStateVector2f),
            "::",
            stringify!(isActive)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionStatePose {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub isActive: XrBool32,
}
#[test]
fn bindgen_test_layout_XrActionStatePose() {
    assert_eq!(
        ::std::mem::size_of::<XrActionStatePose>(),
        24usize,
        concat!("Size of: ", stringify!(XrActionStatePose))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActionStatePose>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActionStatePose))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionStatePose>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStatePose),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionStatePose>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStatePose),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionStatePose>())).isActive as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionStatePose),
            "::",
            stringify!(isActive)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActiveActionSet {
    pub actionSet: XrActionSet,
    pub subactionPath: XrPath,
}
#[test]
fn bindgen_test_layout_XrActiveActionSet() {
    assert_eq!(
        ::std::mem::size_of::<XrActiveActionSet>(),
        16usize,
        concat!("Size of: ", stringify!(XrActiveActionSet))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActiveActionSet>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActiveActionSet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActiveActionSet>())).actionSet as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActiveActionSet),
            "::",
            stringify!(actionSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActiveActionSet>())).subactionPath as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActiveActionSet),
            "::",
            stringify!(subactionPath)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionsSyncInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub countActiveActionSets: u32,
    pub activeActionSets: *const XrActiveActionSet,
}
#[test]
fn bindgen_test_layout_XrActionsSyncInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrActionsSyncInfo>(),
        32usize,
        concat!("Size of: ", stringify!(XrActionsSyncInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrActionsSyncInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrActionsSyncInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionsSyncInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionsSyncInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrActionsSyncInfo>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionsSyncInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrActionsSyncInfo>())).countActiveActionSets as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionsSyncInfo),
            "::",
            stringify!(countActiveActionSets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrActionsSyncInfo>())).activeActionSets as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrActionsSyncInfo),
            "::",
            stringify!(activeActionSets)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBoundSourcesForActionEnumerateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub action: XrAction,
}
#[test]
fn bindgen_test_layout_XrBoundSourcesForActionEnumerateInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrBoundSourcesForActionEnumerateInfo>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrBoundSourcesForActionEnumerateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrBoundSourcesForActionEnumerateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrBoundSourcesForActionEnumerateInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrBoundSourcesForActionEnumerateInfo>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBoundSourcesForActionEnumerateInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrBoundSourcesForActionEnumerateInfo>())).next as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBoundSourcesForActionEnumerateInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrBoundSourcesForActionEnumerateInfo>())).action as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBoundSourcesForActionEnumerateInfo),
            "::",
            stringify!(action)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrInputSourceLocalizedNameGetInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub sourcePath: XrPath,
    pub whichComponents: XrInputSourceLocalizedNameFlags,
}
#[test]
fn bindgen_test_layout_XrInputSourceLocalizedNameGetInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrInputSourceLocalizedNameGetInfo>(),
        32usize,
        concat!("Size of: ", stringify!(XrInputSourceLocalizedNameGetInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrInputSourceLocalizedNameGetInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrInputSourceLocalizedNameGetInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInputSourceLocalizedNameGetInfo>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInputSourceLocalizedNameGetInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInputSourceLocalizedNameGetInfo>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInputSourceLocalizedNameGetInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInputSourceLocalizedNameGetInfo>())).sourcePath as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInputSourceLocalizedNameGetInfo),
            "::",
            stringify!(sourcePath)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInputSourceLocalizedNameGetInfo>())).whichComponents
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInputSourceLocalizedNameGetInfo),
            "::",
            stringify!(whichComponents)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHapticActionInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub action: XrAction,
    pub subactionPath: XrPath,
}
#[test]
fn bindgen_test_layout_XrHapticActionInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrHapticActionInfo>(),
        32usize,
        concat!("Size of: ", stringify!(XrHapticActionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHapticActionInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHapticActionInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHapticActionInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticActionInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHapticActionInfo>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticActionInfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHapticActionInfo>())).action as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticActionInfo),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHapticActionInfo>())).subactionPath as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticActionInfo),
            "::",
            stringify!(subactionPath)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHapticBaseHeader {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrHapticBaseHeader() {
    assert_eq!(
        ::std::mem::size_of::<XrHapticBaseHeader>(),
        16usize,
        concat!("Size of: ", stringify!(XrHapticBaseHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHapticBaseHeader>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHapticBaseHeader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHapticBaseHeader>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticBaseHeader),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHapticBaseHeader>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticBaseHeader),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBaseInStructure {
    pub type_: XrStructureType,
    pub next: *const XrBaseInStructure,
}
#[test]
fn bindgen_test_layout_XrBaseInStructure() {
    assert_eq!(
        ::std::mem::size_of::<XrBaseInStructure>(),
        16usize,
        concat!("Size of: ", stringify!(XrBaseInStructure))
    );
    assert_eq!(
        ::std::mem::align_of::<XrBaseInStructure>(),
        8usize,
        concat!("Alignment of ", stringify!(XrBaseInStructure))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrBaseInStructure>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBaseInStructure),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrBaseInStructure>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBaseInStructure),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBaseOutStructure {
    pub type_: XrStructureType,
    pub next: *mut XrBaseOutStructure,
}
#[test]
fn bindgen_test_layout_XrBaseOutStructure() {
    assert_eq!(
        ::std::mem::size_of::<XrBaseOutStructure>(),
        16usize,
        concat!("Size of: ", stringify!(XrBaseOutStructure))
    );
    assert_eq!(
        ::std::mem::align_of::<XrBaseOutStructure>(),
        8usize,
        concat!("Alignment of ", stringify!(XrBaseOutStructure))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrBaseOutStructure>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBaseOutStructure),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrBaseOutStructure>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBaseOutStructure),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrOffset2Di {
    pub x: i32,
    pub y: i32,
}
#[test]
fn bindgen_test_layout_XrOffset2Di() {
    assert_eq!(
        ::std::mem::size_of::<XrOffset2Di>(),
        8usize,
        concat!("Size of: ", stringify!(XrOffset2Di))
    );
    assert_eq!(
        ::std::mem::align_of::<XrOffset2Di>(),
        4usize,
        concat!("Alignment of ", stringify!(XrOffset2Di))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrOffset2Di>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrOffset2Di),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrOffset2Di>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrOffset2Di),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrExtent2Di {
    pub width: i32,
    pub height: i32,
}
#[test]
fn bindgen_test_layout_XrExtent2Di() {
    assert_eq!(
        ::std::mem::size_of::<XrExtent2Di>(),
        8usize,
        concat!("Size of: ", stringify!(XrExtent2Di))
    );
    assert_eq!(
        ::std::mem::align_of::<XrExtent2Di>(),
        4usize,
        concat!("Alignment of ", stringify!(XrExtent2Di))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrExtent2Di>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExtent2Di),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrExtent2Di>())).height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrExtent2Di),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRect2Di {
    pub offset: XrOffset2Di,
    pub extent: XrExtent2Di,
}
#[test]
fn bindgen_test_layout_XrRect2Di() {
    assert_eq!(
        ::std::mem::size_of::<XrRect2Di>(),
        16usize,
        concat!("Size of: ", stringify!(XrRect2Di))
    );
    assert_eq!(
        ::std::mem::align_of::<XrRect2Di>(),
        4usize,
        concat!("Alignment of ", stringify!(XrRect2Di))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrRect2Di>())).offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRect2Di),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrRect2Di>())).extent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRect2Di),
            "::",
            stringify!(extent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainSubImage {
    pub swapchain: XrSwapchain,
    pub imageRect: XrRect2Di,
    pub imageArrayIndex: u32,
}
#[test]
fn bindgen_test_layout_XrSwapchainSubImage() {
    assert_eq!(
        ::std::mem::size_of::<XrSwapchainSubImage>(),
        32usize,
        concat!("Size of: ", stringify!(XrSwapchainSubImage))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSwapchainSubImage>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSwapchainSubImage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSwapchainSubImage>())).swapchain as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainSubImage),
            "::",
            stringify!(swapchain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrSwapchainSubImage>())).imageRect as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainSubImage),
            "::",
            stringify!(imageRect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSwapchainSubImage>())).imageArrayIndex as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSwapchainSubImage),
            "::",
            stringify!(imageArrayIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerProjectionView {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub pose: XrPosef,
    pub fov: XrFovf,
    pub subImage: XrSwapchainSubImage,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerProjectionView() {
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerProjectionView>(),
        96usize,
        concat!("Size of: ", stringify!(XrCompositionLayerProjectionView))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerProjectionView>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrCompositionLayerProjectionView)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerProjectionView>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerProjectionView),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerProjectionView>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerProjectionView),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerProjectionView>())).pose as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerProjectionView),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerProjectionView>())).fov as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerProjectionView),
            "::",
            stringify!(fov)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerProjectionView>())).subImage as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerProjectionView),
            "::",
            stringify!(subImage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerProjection {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerFlags,
    pub space: XrSpace,
    pub viewCount: u32,
    pub views: *const XrCompositionLayerProjectionView,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerProjection() {
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerProjection>(),
        48usize,
        concat!("Size of: ", stringify!(XrCompositionLayerProjection))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerProjection>(),
        8usize,
        concat!("Alignment of ", stringify!(XrCompositionLayerProjection))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerProjection>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerProjection),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerProjection>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerProjection),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerProjection>())).layerFlags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerProjection),
            "::",
            stringify!(layerFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerProjection>())).space as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerProjection),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerProjection>())).viewCount as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerProjection),
            "::",
            stringify!(viewCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerProjection>())).views as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerProjection),
            "::",
            stringify!(views)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerQuad {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerFlags,
    pub space: XrSpace,
    pub eyeVisibility: XrEyeVisibility,
    pub subImage: XrSwapchainSubImage,
    pub pose: XrPosef,
    pub size: XrExtent2Df,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerQuad() {
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerQuad>(),
        112usize,
        concat!("Size of: ", stringify!(XrCompositionLayerQuad))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerQuad>(),
        8usize,
        concat!("Alignment of ", stringify!(XrCompositionLayerQuad))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrCompositionLayerQuad>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerQuad),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrCompositionLayerQuad>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerQuad),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerQuad>())).layerFlags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerQuad),
            "::",
            stringify!(layerFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrCompositionLayerQuad>())).space as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerQuad),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerQuad>())).eyeVisibility as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerQuad),
            "::",
            stringify!(eyeVisibility)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrCompositionLayerQuad>())).subImage as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerQuad),
            "::",
            stringify!(subImage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrCompositionLayerQuad>())).pose as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerQuad),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrCompositionLayerQuad>())).size as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerQuad),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataBaseHeader {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrEventDataBaseHeader() {
    assert_eq!(
        ::std::mem::size_of::<XrEventDataBaseHeader>(),
        16usize,
        concat!("Size of: ", stringify!(XrEventDataBaseHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataBaseHeader>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEventDataBaseHeader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrEventDataBaseHeader>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataBaseHeader),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrEventDataBaseHeader>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataBaseHeader),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataEventsLost {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub lostEventCount: u32,
}
#[test]
fn bindgen_test_layout_XrEventDataEventsLost() {
    assert_eq!(
        ::std::mem::size_of::<XrEventDataEventsLost>(),
        24usize,
        concat!("Size of: ", stringify!(XrEventDataEventsLost))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataEventsLost>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEventDataEventsLost))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrEventDataEventsLost>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataEventsLost),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrEventDataEventsLost>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataEventsLost),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataEventsLost>())).lostEventCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataEventsLost),
            "::",
            stringify!(lostEventCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataInstanceLossPending {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub lossTime: XrTime,
}
#[test]
fn bindgen_test_layout_XrEventDataInstanceLossPending() {
    assert_eq!(
        ::std::mem::size_of::<XrEventDataInstanceLossPending>(),
        24usize,
        concat!("Size of: ", stringify!(XrEventDataInstanceLossPending))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataInstanceLossPending>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEventDataInstanceLossPending))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataInstanceLossPending>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataInstanceLossPending),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataInstanceLossPending>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataInstanceLossPending),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataInstanceLossPending>())).lossTime as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataInstanceLossPending),
            "::",
            stringify!(lossTime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataSessionStateChanged {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub session: XrSession,
    pub state: XrSessionState,
    pub time: XrTime,
}
#[test]
fn bindgen_test_layout_XrEventDataSessionStateChanged() {
    assert_eq!(
        ::std::mem::size_of::<XrEventDataSessionStateChanged>(),
        40usize,
        concat!("Size of: ", stringify!(XrEventDataSessionStateChanged))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataSessionStateChanged>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEventDataSessionStateChanged))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataSessionStateChanged>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSessionStateChanged),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataSessionStateChanged>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSessionStateChanged),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataSessionStateChanged>())).session as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSessionStateChanged),
            "::",
            stringify!(session)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataSessionStateChanged>())).state as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSessionStateChanged),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataSessionStateChanged>())).time as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataSessionStateChanged),
            "::",
            stringify!(time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataReferenceSpaceChangePending {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub session: XrSession,
    pub referenceSpaceType: XrReferenceSpaceType,
    pub changeTime: XrTime,
    pub poseValid: XrBool32,
    pub poseInPreviousSpace: XrPosef,
}
#[test]
fn bindgen_test_layout_XrEventDataReferenceSpaceChangePending() {
    assert_eq!(
        ::std::mem::size_of::<XrEventDataReferenceSpaceChangePending>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(XrEventDataReferenceSpaceChangePending)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataReferenceSpaceChangePending>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataReferenceSpaceChangePending)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataReferenceSpaceChangePending>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataReferenceSpaceChangePending),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataReferenceSpaceChangePending>())).next as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataReferenceSpaceChangePending),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataReferenceSpaceChangePending>())).session as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataReferenceSpaceChangePending),
            "::",
            stringify!(session)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataReferenceSpaceChangePending>())).referenceSpaceType
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataReferenceSpaceChangePending),
            "::",
            stringify!(referenceSpaceType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataReferenceSpaceChangePending>())).changeTime
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataReferenceSpaceChangePending),
            "::",
            stringify!(changeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataReferenceSpaceChangePending>())).poseValid as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataReferenceSpaceChangePending),
            "::",
            stringify!(poseValid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataReferenceSpaceChangePending>())).poseInPreviousSpace
                as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataReferenceSpaceChangePending),
            "::",
            stringify!(poseInPreviousSpace)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataInteractionProfileChanged {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub session: XrSession,
}
#[test]
fn bindgen_test_layout_XrEventDataInteractionProfileChanged() {
    assert_eq!(
        ::std::mem::size_of::<XrEventDataInteractionProfileChanged>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrEventDataInteractionProfileChanged)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataInteractionProfileChanged>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataInteractionProfileChanged)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataInteractionProfileChanged>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataInteractionProfileChanged),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataInteractionProfileChanged>())).next as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataInteractionProfileChanged),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataInteractionProfileChanged>())).session as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataInteractionProfileChanged),
            "::",
            stringify!(session)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHapticVibration {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub duration: XrDuration,
    pub frequency: f32,
    pub amplitude: f32,
}
#[test]
fn bindgen_test_layout_XrHapticVibration() {
    assert_eq!(
        ::std::mem::size_of::<XrHapticVibration>(),
        32usize,
        concat!("Size of: ", stringify!(XrHapticVibration))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHapticVibration>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHapticVibration))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHapticVibration>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticVibration),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHapticVibration>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticVibration),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHapticVibration>())).duration as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticVibration),
            "::",
            stringify!(duration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHapticVibration>())).frequency as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticVibration),
            "::",
            stringify!(frequency)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHapticVibration>())).amplitude as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHapticVibration),
            "::",
            stringify!(amplitude)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrOffset2Df {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_XrOffset2Df() {
    assert_eq!(
        ::std::mem::size_of::<XrOffset2Df>(),
        8usize,
        concat!("Size of: ", stringify!(XrOffset2Df))
    );
    assert_eq!(
        ::std::mem::align_of::<XrOffset2Df>(),
        4usize,
        concat!("Alignment of ", stringify!(XrOffset2Df))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrOffset2Df>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrOffset2Df),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrOffset2Df>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrOffset2Df),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRect2Df {
    pub offset: XrOffset2Df,
    pub extent: XrExtent2Df,
}
#[test]
fn bindgen_test_layout_XrRect2Df() {
    assert_eq!(
        ::std::mem::size_of::<XrRect2Df>(),
        16usize,
        concat!("Size of: ", stringify!(XrRect2Df))
    );
    assert_eq!(
        ::std::mem::align_of::<XrRect2Df>(),
        4usize,
        concat!("Alignment of ", stringify!(XrRect2Df))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrRect2Df>())).offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRect2Df),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrRect2Df>())).extent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrRect2Df),
            "::",
            stringify!(extent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVector4f {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout_XrVector4f() {
    assert_eq!(
        ::std::mem::size_of::<XrVector4f>(),
        16usize,
        concat!("Size of: ", stringify!(XrVector4f))
    );
    assert_eq!(
        ::std::mem::align_of::<XrVector4f>(),
        4usize,
        concat!("Alignment of ", stringify!(XrVector4f))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrVector4f>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVector4f),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrVector4f>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVector4f),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrVector4f>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVector4f),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrVector4f>())).w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVector4f),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrColor4f {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[test]
fn bindgen_test_layout_XrColor4f() {
    assert_eq!(
        ::std::mem::size_of::<XrColor4f>(),
        16usize,
        concat!("Size of: ", stringify!(XrColor4f))
    );
    assert_eq!(
        ::std::mem::align_of::<XrColor4f>(),
        4usize,
        concat!("Alignment of ", stringify!(XrColor4f))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrColor4f>())).r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrColor4f),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrColor4f>())).g as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrColor4f),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrColor4f>())).b as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrColor4f),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrColor4f>())).a as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XrColor4f),
            "::",
            stringify!(a)
        )
    );
}
pub type PFN_xrGetInstanceProcAddr = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        name: *const ::std::os::raw::c_char,
        function: *mut PFN_xrVoidFunction,
    ) -> XrResult,
>;
pub type PFN_xrEnumerateApiLayerProperties = ::std::option::Option<
    unsafe extern "C" fn(
        propertyCapacityInput: u32,
        propertyCountOutput: *mut u32,
        properties: *mut XrApiLayerProperties,
    ) -> XrResult,
>;
pub type PFN_xrEnumerateInstanceExtensionProperties = ::std::option::Option<
    unsafe extern "C" fn(
        layerName: *const ::std::os::raw::c_char,
        propertyCapacityInput: u32,
        propertyCountOutput: *mut u32,
        properties: *mut XrExtensionProperties,
    ) -> XrResult,
>;
pub type PFN_xrCreateInstance = ::std::option::Option<
    unsafe extern "C" fn(
        createInfo: *const XrInstanceCreateInfo,
        instance: *mut XrInstance,
    ) -> XrResult,
>;
pub type PFN_xrDestroyInstance =
    ::std::option::Option<unsafe extern "C" fn(instance: XrInstance) -> XrResult>;
pub type PFN_xrGetInstanceProperties = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        instanceProperties: *mut XrInstanceProperties,
    ) -> XrResult,
>;
pub type PFN_xrPollEvent = ::std::option::Option<
    unsafe extern "C" fn(instance: XrInstance, eventData: *mut XrEventDataBuffer) -> XrResult,
>;
pub type PFN_xrResultToString = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        value: XrResult,
        buffer: *mut ::std::os::raw::c_char,
    ) -> XrResult,
>;
pub type PFN_xrStructureTypeToString = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        value: XrStructureType,
        buffer: *mut ::std::os::raw::c_char,
    ) -> XrResult,
>;
pub type PFN_xrGetSystem = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        getInfo: *const XrSystemGetInfo,
        systemId: *mut XrSystemId,
    ) -> XrResult,
>;
pub type PFN_xrGetSystemProperties = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        systemId: XrSystemId,
        properties: *mut XrSystemProperties,
    ) -> XrResult,
>;
pub type PFN_xrEnumerateEnvironmentBlendModes = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        systemId: XrSystemId,
        viewConfigurationType: XrViewConfigurationType,
        environmentBlendModeCapacityInput: u32,
        environmentBlendModeCountOutput: *mut u32,
        environmentBlendModes: *mut XrEnvironmentBlendMode,
    ) -> XrResult,
>;
pub type PFN_xrCreateSession = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        createInfo: *const XrSessionCreateInfo,
        session: *mut XrSession,
    ) -> XrResult,
>;
pub type PFN_xrDestroySession =
    ::std::option::Option<unsafe extern "C" fn(session: XrSession) -> XrResult>;
pub type PFN_xrEnumerateReferenceSpaces = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        spaceCapacityInput: u32,
        spaceCountOutput: *mut u32,
        spaces: *mut XrReferenceSpaceType,
    ) -> XrResult,
>;
pub type PFN_xrCreateReferenceSpace = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrReferenceSpaceCreateInfo,
        space: *mut XrSpace,
    ) -> XrResult,
>;
pub type PFN_xrGetReferenceSpaceBoundsRect = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        referenceSpaceType: XrReferenceSpaceType,
        bounds: *mut XrExtent2Df,
    ) -> XrResult,
>;
pub type PFN_xrCreateActionSpace = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrActionSpaceCreateInfo,
        space: *mut XrSpace,
    ) -> XrResult,
>;
pub type PFN_xrLocateSpace = ::std::option::Option<
    unsafe extern "C" fn(
        space: XrSpace,
        baseSpace: XrSpace,
        time: XrTime,
        location: *mut XrSpaceLocation,
    ) -> XrResult,
>;
pub type PFN_xrDestroySpace =
    ::std::option::Option<unsafe extern "C" fn(space: XrSpace) -> XrResult>;
pub type PFN_xrEnumerateViewConfigurations = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        systemId: XrSystemId,
        viewConfigurationTypeCapacityInput: u32,
        viewConfigurationTypeCountOutput: *mut u32,
        viewConfigurationTypes: *mut XrViewConfigurationType,
    ) -> XrResult,
>;
pub type PFN_xrGetViewConfigurationProperties = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        systemId: XrSystemId,
        viewConfigurationType: XrViewConfigurationType,
        configurationProperties: *mut XrViewConfigurationProperties,
    ) -> XrResult,
>;
pub type PFN_xrEnumerateViewConfigurationViews = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        systemId: XrSystemId,
        viewConfigurationType: XrViewConfigurationType,
        viewCapacityInput: u32,
        viewCountOutput: *mut u32,
        views: *mut XrViewConfigurationView,
    ) -> XrResult,
>;
pub type PFN_xrEnumerateSwapchainFormats = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        formatCapacityInput: u32,
        formatCountOutput: *mut u32,
        formats: *mut i64,
    ) -> XrResult,
>;
pub type PFN_xrCreateSwapchain = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrSwapchainCreateInfo,
        swapchain: *mut XrSwapchain,
    ) -> XrResult,
>;
pub type PFN_xrDestroySwapchain =
    ::std::option::Option<unsafe extern "C" fn(swapchain: XrSwapchain) -> XrResult>;
pub type PFN_xrEnumerateSwapchainImages = ::std::option::Option<
    unsafe extern "C" fn(
        swapchain: XrSwapchain,
        imageCapacityInput: u32,
        imageCountOutput: *mut u32,
        images: *mut XrSwapchainImageBaseHeader,
    ) -> XrResult,
>;
pub type PFN_xrAcquireSwapchainImage = ::std::option::Option<
    unsafe extern "C" fn(
        swapchain: XrSwapchain,
        acquireInfo: *const XrSwapchainImageAcquireInfo,
        index: *mut u32,
    ) -> XrResult,
>;
pub type PFN_xrWaitSwapchainImage = ::std::option::Option<
    unsafe extern "C" fn(
        swapchain: XrSwapchain,
        waitInfo: *const XrSwapchainImageWaitInfo,
    ) -> XrResult,
>;
pub type PFN_xrReleaseSwapchainImage = ::std::option::Option<
    unsafe extern "C" fn(
        swapchain: XrSwapchain,
        releaseInfo: *const XrSwapchainImageReleaseInfo,
    ) -> XrResult,
>;
pub type PFN_xrBeginSession = ::std::option::Option<
    unsafe extern "C" fn(session: XrSession, beginInfo: *const XrSessionBeginInfo) -> XrResult,
>;
pub type PFN_xrEndSession =
    ::std::option::Option<unsafe extern "C" fn(session: XrSession) -> XrResult>;
pub type PFN_xrRequestExitSession =
    ::std::option::Option<unsafe extern "C" fn(session: XrSession) -> XrResult>;
pub type PFN_xrWaitFrame = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        frameWaitInfo: *const XrFrameWaitInfo,
        frameState: *mut XrFrameState,
    ) -> XrResult,
>;
pub type PFN_xrBeginFrame = ::std::option::Option<
    unsafe extern "C" fn(session: XrSession, frameBeginInfo: *const XrFrameBeginInfo) -> XrResult,
>;
pub type PFN_xrEndFrame = ::std::option::Option<
    unsafe extern "C" fn(session: XrSession, frameEndInfo: *const XrFrameEndInfo) -> XrResult,
>;
pub type PFN_xrLocateViews = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        viewLocateInfo: *const XrViewLocateInfo,
        viewState: *mut XrViewState,
        viewCapacityInput: u32,
        viewCountOutput: *mut u32,
        views: *mut XrView,
    ) -> XrResult,
>;
pub type PFN_xrStringToPath = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        pathString: *const ::std::os::raw::c_char,
        path: *mut XrPath,
    ) -> XrResult,
>;
pub type PFN_xrPathToString = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        path: XrPath,
        bufferCapacityInput: u32,
        bufferCountOutput: *mut u32,
        buffer: *mut ::std::os::raw::c_char,
    ) -> XrResult,
>;
pub type PFN_xrCreateActionSet = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        createInfo: *const XrActionSetCreateInfo,
        actionSet: *mut XrActionSet,
    ) -> XrResult,
>;
pub type PFN_xrDestroyActionSet =
    ::std::option::Option<unsafe extern "C" fn(actionSet: XrActionSet) -> XrResult>;
pub type PFN_xrCreateAction = ::std::option::Option<
    unsafe extern "C" fn(
        actionSet: XrActionSet,
        createInfo: *const XrActionCreateInfo,
        action: *mut XrAction,
    ) -> XrResult,
>;
pub type PFN_xrDestroyAction =
    ::std::option::Option<unsafe extern "C" fn(action: XrAction) -> XrResult>;
pub type PFN_xrSuggestInteractionProfileBindings = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        suggestedBindings: *const XrInteractionProfileSuggestedBinding,
    ) -> XrResult,
>;
pub type PFN_xrAttachSessionActionSets = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        attachInfo: *const XrSessionActionSetsAttachInfo,
    ) -> XrResult,
>;
pub type PFN_xrGetCurrentInteractionProfile = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        topLevelUserPath: XrPath,
        interactionProfile: *mut XrInteractionProfileState,
    ) -> XrResult,
>;
pub type PFN_xrGetActionStateBoolean = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        getInfo: *const XrActionStateGetInfo,
        state: *mut XrActionStateBoolean,
    ) -> XrResult,
>;
pub type PFN_xrGetActionStateFloat = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        getInfo: *const XrActionStateGetInfo,
        state: *mut XrActionStateFloat,
    ) -> XrResult,
>;
pub type PFN_xrGetActionStateVector2f = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        getInfo: *const XrActionStateGetInfo,
        state: *mut XrActionStateVector2f,
    ) -> XrResult,
>;
pub type PFN_xrGetActionStatePose = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        getInfo: *const XrActionStateGetInfo,
        state: *mut XrActionStatePose,
    ) -> XrResult,
>;
pub type PFN_xrSyncActions = ::std::option::Option<
    unsafe extern "C" fn(session: XrSession, syncInfo: *const XrActionsSyncInfo) -> XrResult,
>;
pub type PFN_xrEnumerateBoundSourcesForAction = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        enumerateInfo: *const XrBoundSourcesForActionEnumerateInfo,
        sourceCapacityInput: u32,
        sourceCountOutput: *mut u32,
        sources: *mut XrPath,
    ) -> XrResult,
>;
pub type PFN_xrGetInputSourceLocalizedName = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        getInfo: *const XrInputSourceLocalizedNameGetInfo,
        bufferCapacityInput: u32,
        bufferCountOutput: *mut u32,
        buffer: *mut ::std::os::raw::c_char,
    ) -> XrResult,
>;
pub type PFN_xrApplyHapticFeedback = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        hapticActionInfo: *const XrHapticActionInfo,
        hapticFeedback: *const XrHapticBaseHeader,
    ) -> XrResult,
>;
pub type PFN_xrStopHapticFeedback = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        hapticActionInfo: *const XrHapticActionInfo,
    ) -> XrResult,
>;
extern "C" {
    pub fn xrGetInstanceProcAddr(
        instance: XrInstance,
        name: *const ::std::os::raw::c_char,
        function: *mut PFN_xrVoidFunction,
    ) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateApiLayerProperties(
        propertyCapacityInput: u32,
        propertyCountOutput: *mut u32,
        properties: *mut XrApiLayerProperties,
    ) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateInstanceExtensionProperties(
        layerName: *const ::std::os::raw::c_char,
        propertyCapacityInput: u32,
        propertyCountOutput: *mut u32,
        properties: *mut XrExtensionProperties,
    ) -> XrResult;
}
extern "C" {
    pub fn xrCreateInstance(
        createInfo: *const XrInstanceCreateInfo,
        instance: *mut XrInstance,
    ) -> XrResult;
}
extern "C" {
    pub fn xrDestroyInstance(instance: XrInstance) -> XrResult;
}
extern "C" {
    pub fn xrGetInstanceProperties(
        instance: XrInstance,
        instanceProperties: *mut XrInstanceProperties,
    ) -> XrResult;
}
extern "C" {
    pub fn xrPollEvent(instance: XrInstance, eventData: *mut XrEventDataBuffer) -> XrResult;
}
extern "C" {
    pub fn xrResultToString(
        instance: XrInstance,
        value: XrResult,
        buffer: *mut ::std::os::raw::c_char,
    ) -> XrResult;
}
extern "C" {
    pub fn xrStructureTypeToString(
        instance: XrInstance,
        value: XrStructureType,
        buffer: *mut ::std::os::raw::c_char,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetSystem(
        instance: XrInstance,
        getInfo: *const XrSystemGetInfo,
        systemId: *mut XrSystemId,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetSystemProperties(
        instance: XrInstance,
        systemId: XrSystemId,
        properties: *mut XrSystemProperties,
    ) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateEnvironmentBlendModes(
        instance: XrInstance,
        systemId: XrSystemId,
        viewConfigurationType: XrViewConfigurationType,
        environmentBlendModeCapacityInput: u32,
        environmentBlendModeCountOutput: *mut u32,
        environmentBlendModes: *mut XrEnvironmentBlendMode,
    ) -> XrResult;
}
extern "C" {
    pub fn xrCreateSession(
        instance: XrInstance,
        createInfo: *const XrSessionCreateInfo,
        session: *mut XrSession,
    ) -> XrResult;
}
extern "C" {
    pub fn xrDestroySession(session: XrSession) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateReferenceSpaces(
        session: XrSession,
        spaceCapacityInput: u32,
        spaceCountOutput: *mut u32,
        spaces: *mut XrReferenceSpaceType,
    ) -> XrResult;
}
extern "C" {
    pub fn xrCreateReferenceSpace(
        session: XrSession,
        createInfo: *const XrReferenceSpaceCreateInfo,
        space: *mut XrSpace,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetReferenceSpaceBoundsRect(
        session: XrSession,
        referenceSpaceType: XrReferenceSpaceType,
        bounds: *mut XrExtent2Df,
    ) -> XrResult;
}
extern "C" {
    pub fn xrCreateActionSpace(
        session: XrSession,
        createInfo: *const XrActionSpaceCreateInfo,
        space: *mut XrSpace,
    ) -> XrResult;
}
extern "C" {
    pub fn xrLocateSpace(
        space: XrSpace,
        baseSpace: XrSpace,
        time: XrTime,
        location: *mut XrSpaceLocation,
    ) -> XrResult;
}
extern "C" {
    pub fn xrDestroySpace(space: XrSpace) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateViewConfigurations(
        instance: XrInstance,
        systemId: XrSystemId,
        viewConfigurationTypeCapacityInput: u32,
        viewConfigurationTypeCountOutput: *mut u32,
        viewConfigurationTypes: *mut XrViewConfigurationType,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetViewConfigurationProperties(
        instance: XrInstance,
        systemId: XrSystemId,
        viewConfigurationType: XrViewConfigurationType,
        configurationProperties: *mut XrViewConfigurationProperties,
    ) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateViewConfigurationViews(
        instance: XrInstance,
        systemId: XrSystemId,
        viewConfigurationType: XrViewConfigurationType,
        viewCapacityInput: u32,
        viewCountOutput: *mut u32,
        views: *mut XrViewConfigurationView,
    ) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateSwapchainFormats(
        session: XrSession,
        formatCapacityInput: u32,
        formatCountOutput: *mut u32,
        formats: *mut i64,
    ) -> XrResult;
}
extern "C" {
    pub fn xrCreateSwapchain(
        session: XrSession,
        createInfo: *const XrSwapchainCreateInfo,
        swapchain: *mut XrSwapchain,
    ) -> XrResult;
}
extern "C" {
    pub fn xrDestroySwapchain(swapchain: XrSwapchain) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateSwapchainImages(
        swapchain: XrSwapchain,
        imageCapacityInput: u32,
        imageCountOutput: *mut u32,
        images: *mut XrSwapchainImageBaseHeader,
    ) -> XrResult;
}
extern "C" {
    pub fn xrAcquireSwapchainImage(
        swapchain: XrSwapchain,
        acquireInfo: *const XrSwapchainImageAcquireInfo,
        index: *mut u32,
    ) -> XrResult;
}
extern "C" {
    pub fn xrWaitSwapchainImage(
        swapchain: XrSwapchain,
        waitInfo: *const XrSwapchainImageWaitInfo,
    ) -> XrResult;
}
extern "C" {
    pub fn xrReleaseSwapchainImage(
        swapchain: XrSwapchain,
        releaseInfo: *const XrSwapchainImageReleaseInfo,
    ) -> XrResult;
}
extern "C" {
    pub fn xrBeginSession(session: XrSession, beginInfo: *const XrSessionBeginInfo) -> XrResult;
}
extern "C" {
    pub fn xrEndSession(session: XrSession) -> XrResult;
}
extern "C" {
    pub fn xrRequestExitSession(session: XrSession) -> XrResult;
}
extern "C" {
    pub fn xrWaitFrame(
        session: XrSession,
        frameWaitInfo: *const XrFrameWaitInfo,
        frameState: *mut XrFrameState,
    ) -> XrResult;
}
extern "C" {
    pub fn xrBeginFrame(session: XrSession, frameBeginInfo: *const XrFrameBeginInfo) -> XrResult;
}
extern "C" {
    pub fn xrEndFrame(session: XrSession, frameEndInfo: *const XrFrameEndInfo) -> XrResult;
}
extern "C" {
    pub fn xrLocateViews(
        session: XrSession,
        viewLocateInfo: *const XrViewLocateInfo,
        viewState: *mut XrViewState,
        viewCapacityInput: u32,
        viewCountOutput: *mut u32,
        views: *mut XrView,
    ) -> XrResult;
}
extern "C" {
    pub fn xrStringToPath(
        instance: XrInstance,
        pathString: *const ::std::os::raw::c_char,
        path: *mut XrPath,
    ) -> XrResult;
}
extern "C" {
    pub fn xrPathToString(
        instance: XrInstance,
        path: XrPath,
        bufferCapacityInput: u32,
        bufferCountOutput: *mut u32,
        buffer: *mut ::std::os::raw::c_char,
    ) -> XrResult;
}
extern "C" {
    pub fn xrCreateActionSet(
        instance: XrInstance,
        createInfo: *const XrActionSetCreateInfo,
        actionSet: *mut XrActionSet,
    ) -> XrResult;
}
extern "C" {
    pub fn xrDestroyActionSet(actionSet: XrActionSet) -> XrResult;
}
extern "C" {
    pub fn xrCreateAction(
        actionSet: XrActionSet,
        createInfo: *const XrActionCreateInfo,
        action: *mut XrAction,
    ) -> XrResult;
}
extern "C" {
    pub fn xrDestroyAction(action: XrAction) -> XrResult;
}
extern "C" {
    pub fn xrSuggestInteractionProfileBindings(
        instance: XrInstance,
        suggestedBindings: *const XrInteractionProfileSuggestedBinding,
    ) -> XrResult;
}
extern "C" {
    pub fn xrAttachSessionActionSets(
        session: XrSession,
        attachInfo: *const XrSessionActionSetsAttachInfo,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetCurrentInteractionProfile(
        session: XrSession,
        topLevelUserPath: XrPath,
        interactionProfile: *mut XrInteractionProfileState,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetActionStateBoolean(
        session: XrSession,
        getInfo: *const XrActionStateGetInfo,
        state: *mut XrActionStateBoolean,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetActionStateFloat(
        session: XrSession,
        getInfo: *const XrActionStateGetInfo,
        state: *mut XrActionStateFloat,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetActionStateVector2f(
        session: XrSession,
        getInfo: *const XrActionStateGetInfo,
        state: *mut XrActionStateVector2f,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetActionStatePose(
        session: XrSession,
        getInfo: *const XrActionStateGetInfo,
        state: *mut XrActionStatePose,
    ) -> XrResult;
}
extern "C" {
    pub fn xrSyncActions(session: XrSession, syncInfo: *const XrActionsSyncInfo) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateBoundSourcesForAction(
        session: XrSession,
        enumerateInfo: *const XrBoundSourcesForActionEnumerateInfo,
        sourceCapacityInput: u32,
        sourceCountOutput: *mut u32,
        sources: *mut XrPath,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetInputSourceLocalizedName(
        session: XrSession,
        getInfo: *const XrInputSourceLocalizedNameGetInfo,
        bufferCapacityInput: u32,
        bufferCountOutput: *mut u32,
        buffer: *mut ::std::os::raw::c_char,
    ) -> XrResult;
}
extern "C" {
    pub fn xrApplyHapticFeedback(
        session: XrSession,
        hapticActionInfo: *const XrHapticActionInfo,
        hapticFeedback: *const XrHapticBaseHeader,
    ) -> XrResult;
}
extern "C" {
    pub fn xrStopHapticFeedback(
        session: XrSession,
        hapticActionInfo: *const XrHapticActionInfo,
    ) -> XrResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerCubeKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerFlags,
    pub space: XrSpace,
    pub eyeVisibility: XrEyeVisibility,
    pub swapchain: XrSwapchain,
    pub imageArrayIndex: u32,
    pub orientation: XrQuaternionf,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerCubeKHR() {
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerCubeKHR>(),
        72usize,
        concat!("Size of: ", stringify!(XrCompositionLayerCubeKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerCubeKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(XrCompositionLayerCubeKHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrCompositionLayerCubeKHR>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCubeKHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrCompositionLayerCubeKHR>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCubeKHR),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerCubeKHR>())).layerFlags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCubeKHR),
            "::",
            stringify!(layerFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrCompositionLayerCubeKHR>())).space as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCubeKHR),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerCubeKHR>())).eyeVisibility as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCubeKHR),
            "::",
            stringify!(eyeVisibility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerCubeKHR>())).swapchain as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCubeKHR),
            "::",
            stringify!(swapchain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerCubeKHR>())).imageArrayIndex as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCubeKHR),
            "::",
            stringify!(imageArrayIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerCubeKHR>())).orientation as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCubeKHR),
            "::",
            stringify!(orientation)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerDepthInfoKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub subImage: XrSwapchainSubImage,
    pub minDepth: f32,
    pub maxDepth: f32,
    pub nearZ: f32,
    pub farZ: f32,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerDepthInfoKHR() {
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerDepthInfoKHR>(),
        64usize,
        concat!("Size of: ", stringify!(XrCompositionLayerDepthInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerDepthInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(XrCompositionLayerDepthInfoKHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerDepthInfoKHR>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthInfoKHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerDepthInfoKHR>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthInfoKHR),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerDepthInfoKHR>())).subImage as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthInfoKHR),
            "::",
            stringify!(subImage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerDepthInfoKHR>())).minDepth as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthInfoKHR),
            "::",
            stringify!(minDepth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerDepthInfoKHR>())).maxDepth as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthInfoKHR),
            "::",
            stringify!(maxDepth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerDepthInfoKHR>())).nearZ as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthInfoKHR),
            "::",
            stringify!(nearZ)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerDepthInfoKHR>())).farZ as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthInfoKHR),
            "::",
            stringify!(farZ)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerCylinderKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerFlags,
    pub space: XrSpace,
    pub eyeVisibility: XrEyeVisibility,
    pub subImage: XrSwapchainSubImage,
    pub pose: XrPosef,
    pub radius: f32,
    pub centralAngle: f32,
    pub aspectRatio: f32,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerCylinderKHR() {
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerCylinderKHR>(),
        112usize,
        concat!("Size of: ", stringify!(XrCompositionLayerCylinderKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerCylinderKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(XrCompositionLayerCylinderKHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerCylinderKHR>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCylinderKHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerCylinderKHR>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCylinderKHR),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerCylinderKHR>())).layerFlags as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCylinderKHR),
            "::",
            stringify!(layerFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerCylinderKHR>())).space as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCylinderKHR),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerCylinderKHR>())).eyeVisibility as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCylinderKHR),
            "::",
            stringify!(eyeVisibility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerCylinderKHR>())).subImage as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCylinderKHR),
            "::",
            stringify!(subImage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerCylinderKHR>())).pose as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCylinderKHR),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerCylinderKHR>())).radius as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCylinderKHR),
            "::",
            stringify!(radius)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerCylinderKHR>())).centralAngle as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCylinderKHR),
            "::",
            stringify!(centralAngle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerCylinderKHR>())).aspectRatio as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerCylinderKHR),
            "::",
            stringify!(aspectRatio)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerEquirectKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerFlags,
    pub space: XrSpace,
    pub eyeVisibility: XrEyeVisibility,
    pub subImage: XrSwapchainSubImage,
    pub pose: XrPosef,
    pub radius: f32,
    pub scale: XrVector2f,
    pub bias: XrVector2f,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerEquirectKHR() {
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerEquirectKHR>(),
        120usize,
        concat!("Size of: ", stringify!(XrCompositionLayerEquirectKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerEquirectKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(XrCompositionLayerEquirectKHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerEquirectKHR>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirectKHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerEquirectKHR>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirectKHR),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerEquirectKHR>())).layerFlags as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirectKHR),
            "::",
            stringify!(layerFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerEquirectKHR>())).space as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirectKHR),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerEquirectKHR>())).eyeVisibility as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirectKHR),
            "::",
            stringify!(eyeVisibility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerEquirectKHR>())).subImage as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirectKHR),
            "::",
            stringify!(subImage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerEquirectKHR>())).pose as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirectKHR),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerEquirectKHR>())).radius as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirectKHR),
            "::",
            stringify!(radius)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerEquirectKHR>())).scale as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirectKHR),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerEquirectKHR>())).bias as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirectKHR),
            "::",
            stringify!(bias)
        )
    );
}
pub const XrVisibilityMaskTypeKHR_XR_VISIBILITY_MASK_TYPE_HIDDEN_TRIANGLE_MESH_KHR:
    XrVisibilityMaskTypeKHR = 1;
pub const XrVisibilityMaskTypeKHR_XR_VISIBILITY_MASK_TYPE_VISIBLE_TRIANGLE_MESH_KHR:
    XrVisibilityMaskTypeKHR = 2;
pub const XrVisibilityMaskTypeKHR_XR_VISIBILITY_MASK_TYPE_LINE_LOOP_KHR: XrVisibilityMaskTypeKHR =
    3;
pub const XrVisibilityMaskTypeKHR_XR_VISIBILITY_MASK_TYPE_MAX_ENUM_KHR: XrVisibilityMaskTypeKHR =
    2147483647;
pub type XrVisibilityMaskTypeKHR = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVisibilityMaskKHR {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub vertexCapacityInput: u32,
    pub vertexCountOutput: u32,
    pub vertices: *mut XrVector2f,
    pub indexCapacityInput: u32,
    pub indexCountOutput: u32,
    pub indices: *mut u32,
}
#[test]
fn bindgen_test_layout_XrVisibilityMaskKHR() {
    assert_eq!(
        ::std::mem::size_of::<XrVisibilityMaskKHR>(),
        48usize,
        concat!("Size of: ", stringify!(XrVisibilityMaskKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<XrVisibilityMaskKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(XrVisibilityMaskKHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrVisibilityMaskKHR>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVisibilityMaskKHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrVisibilityMaskKHR>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVisibilityMaskKHR),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrVisibilityMaskKHR>())).vertexCapacityInput as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVisibilityMaskKHR),
            "::",
            stringify!(vertexCapacityInput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrVisibilityMaskKHR>())).vertexCountOutput as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVisibilityMaskKHR),
            "::",
            stringify!(vertexCountOutput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrVisibilityMaskKHR>())).vertices as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVisibilityMaskKHR),
            "::",
            stringify!(vertices)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrVisibilityMaskKHR>())).indexCapacityInput as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVisibilityMaskKHR),
            "::",
            stringify!(indexCapacityInput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrVisibilityMaskKHR>())).indexCountOutput as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVisibilityMaskKHR),
            "::",
            stringify!(indexCountOutput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrVisibilityMaskKHR>())).indices as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrVisibilityMaskKHR),
            "::",
            stringify!(indices)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataVisibilityMaskChangedKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub session: XrSession,
    pub viewConfigurationType: XrViewConfigurationType,
    pub viewIndex: u32,
}
#[test]
fn bindgen_test_layout_XrEventDataVisibilityMaskChangedKHR() {
    assert_eq!(
        ::std::mem::size_of::<XrEventDataVisibilityMaskChangedKHR>(),
        32usize,
        concat!("Size of: ", stringify!(XrEventDataVisibilityMaskChangedKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataVisibilityMaskChangedKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataVisibilityMaskChangedKHR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataVisibilityMaskChangedKHR>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVisibilityMaskChangedKHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataVisibilityMaskChangedKHR>())).next as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVisibilityMaskChangedKHR),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataVisibilityMaskChangedKHR>())).session as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVisibilityMaskChangedKHR),
            "::",
            stringify!(session)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataVisibilityMaskChangedKHR>())).viewConfigurationType
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVisibilityMaskChangedKHR),
            "::",
            stringify!(viewConfigurationType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataVisibilityMaskChangedKHR>())).viewIndex as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataVisibilityMaskChangedKHR),
            "::",
            stringify!(viewIndex)
        )
    );
}
pub type PFN_xrGetVisibilityMaskKHR = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        viewConfigurationType: XrViewConfigurationType,
        viewIndex: u32,
        visibilityMaskType: XrVisibilityMaskTypeKHR,
        visibilityMask: *mut XrVisibilityMaskKHR,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerColorScaleBiasKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub colorScale: XrColor4f,
    pub colorBias: XrColor4f,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerColorScaleBiasKHR() {
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerColorScaleBiasKHR>(),
        48usize,
        concat!("Size of: ", stringify!(XrCompositionLayerColorScaleBiasKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerColorScaleBiasKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrCompositionLayerColorScaleBiasKHR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerColorScaleBiasKHR>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerColorScaleBiasKHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerColorScaleBiasKHR>())).next as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerColorScaleBiasKHR),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerColorScaleBiasKHR>())).colorScale as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerColorScaleBiasKHR),
            "::",
            stringify!(colorScale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerColorScaleBiasKHR>())).colorBias as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerColorScaleBiasKHR),
            "::",
            stringify!(colorBias)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrLoaderInitInfoBaseHeaderKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrLoaderInitInfoBaseHeaderKHR() {
    assert_eq!(
        ::std::mem::size_of::<XrLoaderInitInfoBaseHeaderKHR>(),
        16usize,
        concat!("Size of: ", stringify!(XrLoaderInitInfoBaseHeaderKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<XrLoaderInitInfoBaseHeaderKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(XrLoaderInitInfoBaseHeaderKHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrLoaderInitInfoBaseHeaderKHR>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrLoaderInitInfoBaseHeaderKHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrLoaderInitInfoBaseHeaderKHR>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrLoaderInitInfoBaseHeaderKHR),
            "::",
            stringify!(next)
        )
    );
}
pub type PFN_xrInitializeLoaderKHR = ::std::option::Option<
    unsafe extern "C" fn(loaderInitInfo: *const XrLoaderInitInfoBaseHeaderKHR) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerEquirect2KHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerFlags,
    pub space: XrSpace,
    pub eyeVisibility: XrEyeVisibility,
    pub subImage: XrSwapchainSubImage,
    pub pose: XrPosef,
    pub radius: f32,
    pub centralHorizontalAngle: f32,
    pub upperVerticalAngle: f32,
    pub lowerVerticalAngle: f32,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerEquirect2KHR() {
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerEquirect2KHR>(),
        120usize,
        concat!("Size of: ", stringify!(XrCompositionLayerEquirect2KHR))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerEquirect2KHR>(),
        8usize,
        concat!("Alignment of ", stringify!(XrCompositionLayerEquirect2KHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerEquirect2KHR>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirect2KHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerEquirect2KHR>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirect2KHR),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerEquirect2KHR>())).layerFlags as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirect2KHR),
            "::",
            stringify!(layerFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerEquirect2KHR>())).space as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirect2KHR),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerEquirect2KHR>())).eyeVisibility as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirect2KHR),
            "::",
            stringify!(eyeVisibility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerEquirect2KHR>())).subImage as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirect2KHR),
            "::",
            stringify!(subImage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerEquirect2KHR>())).pose as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirect2KHR),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerEquirect2KHR>())).radius as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirect2KHR),
            "::",
            stringify!(radius)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerEquirect2KHR>())).centralHorizontalAngle
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirect2KHR),
            "::",
            stringify!(centralHorizontalAngle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerEquirect2KHR>())).upperVerticalAngle
                as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirect2KHR),
            "::",
            stringify!(upperVerticalAngle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerEquirect2KHR>())).lowerVerticalAngle
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerEquirect2KHR),
            "::",
            stringify!(lowerVerticalAngle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBindingModificationBaseHeaderKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrBindingModificationBaseHeaderKHR() {
    assert_eq!(
        ::std::mem::size_of::<XrBindingModificationBaseHeaderKHR>(),
        16usize,
        concat!("Size of: ", stringify!(XrBindingModificationBaseHeaderKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<XrBindingModificationBaseHeaderKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrBindingModificationBaseHeaderKHR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrBindingModificationBaseHeaderKHR>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBindingModificationBaseHeaderKHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrBindingModificationBaseHeaderKHR>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBindingModificationBaseHeaderKHR),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBindingModificationsKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub bindingModificationCount: u32,
    pub bindingModifications: *const *const XrBindingModificationBaseHeaderKHR,
}
#[test]
fn bindgen_test_layout_XrBindingModificationsKHR() {
    assert_eq!(
        ::std::mem::size_of::<XrBindingModificationsKHR>(),
        32usize,
        concat!("Size of: ", stringify!(XrBindingModificationsKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<XrBindingModificationsKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(XrBindingModificationsKHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrBindingModificationsKHR>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBindingModificationsKHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrBindingModificationsKHR>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBindingModificationsKHR),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrBindingModificationsKHR>())).bindingModificationCount
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBindingModificationsKHR),
            "::",
            stringify!(bindingModificationCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrBindingModificationsKHR>())).bindingModifications as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrBindingModificationsKHR),
            "::",
            stringify!(bindingModifications)
        )
    );
}
pub const XrPerfSettingsDomainEXT_XR_PERF_SETTINGS_DOMAIN_CPU_EXT: XrPerfSettingsDomainEXT = 1;
pub const XrPerfSettingsDomainEXT_XR_PERF_SETTINGS_DOMAIN_GPU_EXT: XrPerfSettingsDomainEXT = 2;
pub const XrPerfSettingsDomainEXT_XR_PERF_SETTINGS_DOMAIN_MAX_ENUM_EXT: XrPerfSettingsDomainEXT =
    2147483647;
pub type XrPerfSettingsDomainEXT = i32;
pub const XrPerfSettingsSubDomainEXT_XR_PERF_SETTINGS_SUB_DOMAIN_COMPOSITING_EXT:
    XrPerfSettingsSubDomainEXT = 1;
pub const XrPerfSettingsSubDomainEXT_XR_PERF_SETTINGS_SUB_DOMAIN_RENDERING_EXT:
    XrPerfSettingsSubDomainEXT = 2;
pub const XrPerfSettingsSubDomainEXT_XR_PERF_SETTINGS_SUB_DOMAIN_THERMAL_EXT:
    XrPerfSettingsSubDomainEXT = 3;
pub const XrPerfSettingsSubDomainEXT_XR_PERF_SETTINGS_SUB_DOMAIN_MAX_ENUM_EXT:
    XrPerfSettingsSubDomainEXT = 2147483647;
pub type XrPerfSettingsSubDomainEXT = i32;
pub const XrPerfSettingsLevelEXT_XR_PERF_SETTINGS_LEVEL_POWER_SAVINGS_EXT: XrPerfSettingsLevelEXT =
    0;
pub const XrPerfSettingsLevelEXT_XR_PERF_SETTINGS_LEVEL_SUSTAINED_LOW_EXT: XrPerfSettingsLevelEXT =
    25;
pub const XrPerfSettingsLevelEXT_XR_PERF_SETTINGS_LEVEL_SUSTAINED_HIGH_EXT: XrPerfSettingsLevelEXT =
    50;
pub const XrPerfSettingsLevelEXT_XR_PERF_SETTINGS_LEVEL_BOOST_EXT: XrPerfSettingsLevelEXT = 75;
pub const XrPerfSettingsLevelEXT_XR_PERF_SETTINGS_LEVEL_MAX_ENUM_EXT: XrPerfSettingsLevelEXT =
    2147483647;
pub type XrPerfSettingsLevelEXT = i32;
pub const XrPerfSettingsNotificationLevelEXT_XR_PERF_SETTINGS_NOTIF_LEVEL_NORMAL_EXT:
    XrPerfSettingsNotificationLevelEXT = 0;
pub const XrPerfSettingsNotificationLevelEXT_XR_PERF_SETTINGS_NOTIF_LEVEL_WARNING_EXT:
    XrPerfSettingsNotificationLevelEXT = 25;
pub const XrPerfSettingsNotificationLevelEXT_XR_PERF_SETTINGS_NOTIF_LEVEL_IMPAIRED_EXT:
    XrPerfSettingsNotificationLevelEXT = 75;
pub const XrPerfSettingsNotificationLevelEXT_XR_PERF_SETTINGS_NOTIFICATION_LEVEL_MAX_ENUM_EXT:
    XrPerfSettingsNotificationLevelEXT = 2147483647;
pub type XrPerfSettingsNotificationLevelEXT = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataPerfSettingsEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub domain: XrPerfSettingsDomainEXT,
    pub subDomain: XrPerfSettingsSubDomainEXT,
    pub fromLevel: XrPerfSettingsNotificationLevelEXT,
    pub toLevel: XrPerfSettingsNotificationLevelEXT,
}
#[test]
fn bindgen_test_layout_XrEventDataPerfSettingsEXT() {
    assert_eq!(
        ::std::mem::size_of::<XrEventDataPerfSettingsEXT>(),
        32usize,
        concat!("Size of: ", stringify!(XrEventDataPerfSettingsEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataPerfSettingsEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEventDataPerfSettingsEXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataPerfSettingsEXT>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataPerfSettingsEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrEventDataPerfSettingsEXT>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataPerfSettingsEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataPerfSettingsEXT>())).domain as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataPerfSettingsEXT),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataPerfSettingsEXT>())).subDomain as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataPerfSettingsEXT),
            "::",
            stringify!(subDomain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataPerfSettingsEXT>())).fromLevel as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataPerfSettingsEXT),
            "::",
            stringify!(fromLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataPerfSettingsEXT>())).toLevel as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataPerfSettingsEXT),
            "::",
            stringify!(toLevel)
        )
    );
}
pub type PFN_xrPerfSettingsSetPerformanceLevelEXT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        domain: XrPerfSettingsDomainEXT,
        level: XrPerfSettingsLevelEXT,
    ) -> XrResult,
>;
pub type PFN_xrThermalGetTemperatureTrendEXT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        domain: XrPerfSettingsDomainEXT,
        notificationLevel: *mut XrPerfSettingsNotificationLevelEXT,
        tempHeadroom: *mut f32,
        tempSlope: *mut f32,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrDebugUtilsMessengerEXT_T {
    _unused: [u8; 0],
}
pub type XrDebugUtilsMessengerEXT = *mut XrDebugUtilsMessengerEXT_T;
pub type XrDebugUtilsMessageSeverityFlagsEXT = XrFlags64;
pub const XR_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT: XrDebugUtilsMessageSeverityFlagsEXT = 1;
pub const XR_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT: XrDebugUtilsMessageSeverityFlagsEXT = 16;
pub const XR_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT: XrDebugUtilsMessageSeverityFlagsEXT =
    256;
pub const XR_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT: XrDebugUtilsMessageSeverityFlagsEXT = 4096;
pub type XrDebugUtilsMessageTypeFlagsEXT = XrFlags64;
pub const XR_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT: XrDebugUtilsMessageTypeFlagsEXT = 1;
pub const XR_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT: XrDebugUtilsMessageTypeFlagsEXT = 2;
pub const XR_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT: XrDebugUtilsMessageTypeFlagsEXT = 4;
pub const XR_DEBUG_UTILS_MESSAGE_TYPE_CONFORMANCE_BIT_EXT: XrDebugUtilsMessageTypeFlagsEXT = 8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrDebugUtilsObjectNameInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub objectType: XrObjectType,
    pub objectHandle: u64,
    pub objectName: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_XrDebugUtilsObjectNameInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<XrDebugUtilsObjectNameInfoEXT>(),
        40usize,
        concat!("Size of: ", stringify!(XrDebugUtilsObjectNameInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrDebugUtilsObjectNameInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrDebugUtilsObjectNameInfoEXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrDebugUtilsObjectNameInfoEXT>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsObjectNameInfoEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrDebugUtilsObjectNameInfoEXT>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsObjectNameInfoEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrDebugUtilsObjectNameInfoEXT>())).objectType as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsObjectNameInfoEXT),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrDebugUtilsObjectNameInfoEXT>())).objectHandle as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsObjectNameInfoEXT),
            "::",
            stringify!(objectHandle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrDebugUtilsObjectNameInfoEXT>())).objectName as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsObjectNameInfoEXT),
            "::",
            stringify!(objectName)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrDebugUtilsLabelEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub labelName: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_XrDebugUtilsLabelEXT() {
    assert_eq!(
        ::std::mem::size_of::<XrDebugUtilsLabelEXT>(),
        24usize,
        concat!("Size of: ", stringify!(XrDebugUtilsLabelEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrDebugUtilsLabelEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrDebugUtilsLabelEXT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrDebugUtilsLabelEXT>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsLabelEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrDebugUtilsLabelEXT>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsLabelEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrDebugUtilsLabelEXT>())).labelName as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsLabelEXT),
            "::",
            stringify!(labelName)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrDebugUtilsMessengerCallbackDataEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub messageId: *const ::std::os::raw::c_char,
    pub functionName: *const ::std::os::raw::c_char,
    pub message: *const ::std::os::raw::c_char,
    pub objectCount: u32,
    pub objects: *mut XrDebugUtilsObjectNameInfoEXT,
    pub sessionLabelCount: u32,
    pub sessionLabels: *mut XrDebugUtilsLabelEXT,
}
#[test]
fn bindgen_test_layout_XrDebugUtilsMessengerCallbackDataEXT() {
    assert_eq!(
        ::std::mem::size_of::<XrDebugUtilsMessengerCallbackDataEXT>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(XrDebugUtilsMessengerCallbackDataEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrDebugUtilsMessengerCallbackDataEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrDebugUtilsMessengerCallbackDataEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrDebugUtilsMessengerCallbackDataEXT>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrDebugUtilsMessengerCallbackDataEXT>())).next as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrDebugUtilsMessengerCallbackDataEXT>())).messageId as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(messageId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrDebugUtilsMessengerCallbackDataEXT>())).functionName
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(functionName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrDebugUtilsMessengerCallbackDataEXT>())).message as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrDebugUtilsMessengerCallbackDataEXT>())).objectCount as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(objectCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrDebugUtilsMessengerCallbackDataEXT>())).objects as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(objects)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrDebugUtilsMessengerCallbackDataEXT>())).sessionLabelCount
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(sessionLabelCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrDebugUtilsMessengerCallbackDataEXT>())).sessionLabels
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(sessionLabels)
        )
    );
}
pub type PFN_xrDebugUtilsMessengerCallbackEXT = ::std::option::Option<
    unsafe extern "C" fn(
        messageSeverity: XrDebugUtilsMessageSeverityFlagsEXT,
        messageTypes: XrDebugUtilsMessageTypeFlagsEXT,
        callbackData: *const XrDebugUtilsMessengerCallbackDataEXT,
        userData: *mut ::std::os::raw::c_void,
    ) -> XrBool32,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrDebugUtilsMessengerCreateInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub messageSeverities: XrDebugUtilsMessageSeverityFlagsEXT,
    pub messageTypes: XrDebugUtilsMessageTypeFlagsEXT,
    pub userCallback: PFN_xrDebugUtilsMessengerCallbackEXT,
    pub userData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_XrDebugUtilsMessengerCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<XrDebugUtilsMessengerCreateInfoEXT>(),
        48usize,
        concat!("Size of: ", stringify!(XrDebugUtilsMessengerCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrDebugUtilsMessengerCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrDebugUtilsMessengerCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrDebugUtilsMessengerCreateInfoEXT>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrDebugUtilsMessengerCreateInfoEXT>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrDebugUtilsMessengerCreateInfoEXT>())).messageSeverities
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(messageSeverities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrDebugUtilsMessengerCreateInfoEXT>())).messageTypes as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(messageTypes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrDebugUtilsMessengerCreateInfoEXT>())).userCallback as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(userCallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrDebugUtilsMessengerCreateInfoEXT>())).userData as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(userData)
        )
    );
}
pub type PFN_xrSetDebugUtilsObjectNameEXT = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        nameInfo: *const XrDebugUtilsObjectNameInfoEXT,
    ) -> XrResult,
>;
pub type PFN_xrCreateDebugUtilsMessengerEXT = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        createInfo: *const XrDebugUtilsMessengerCreateInfoEXT,
        messenger: *mut XrDebugUtilsMessengerEXT,
    ) -> XrResult,
>;
pub type PFN_xrDestroyDebugUtilsMessengerEXT =
    ::std::option::Option<unsafe extern "C" fn(messenger: XrDebugUtilsMessengerEXT) -> XrResult>;
pub type PFN_xrSubmitDebugUtilsMessageEXT = ::std::option::Option<
    unsafe extern "C" fn(
        instance: XrInstance,
        messageSeverity: XrDebugUtilsMessageSeverityFlagsEXT,
        messageTypes: XrDebugUtilsMessageTypeFlagsEXT,
        callbackData: *const XrDebugUtilsMessengerCallbackDataEXT,
    ) -> XrResult,
>;
pub type PFN_xrSessionBeginDebugUtilsLabelRegionEXT = ::std::option::Option<
    unsafe extern "C" fn(session: XrSession, labelInfo: *const XrDebugUtilsLabelEXT) -> XrResult,
>;
pub type PFN_xrSessionEndDebugUtilsLabelRegionEXT =
    ::std::option::Option<unsafe extern "C" fn(session: XrSession) -> XrResult>;
pub type PFN_xrSessionInsertDebugUtilsLabelEXT = ::std::option::Option<
    unsafe extern "C" fn(session: XrSession, labelInfo: *const XrDebugUtilsLabelEXT) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemEyeGazeInteractionPropertiesEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsEyeGazeInteraction: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemEyeGazeInteractionPropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<XrSystemEyeGazeInteractionPropertiesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrSystemEyeGazeInteractionPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemEyeGazeInteractionPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemEyeGazeInteractionPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemEyeGazeInteractionPropertiesEXT>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemEyeGazeInteractionPropertiesEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemEyeGazeInteractionPropertiesEXT>())).next as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemEyeGazeInteractionPropertiesEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemEyeGazeInteractionPropertiesEXT>()))
                .supportsEyeGazeInteraction as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemEyeGazeInteractionPropertiesEXT),
            "::",
            stringify!(supportsEyeGazeInteraction)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEyeGazeSampleTimeEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub time: XrTime,
}
#[test]
fn bindgen_test_layout_XrEyeGazeSampleTimeEXT() {
    assert_eq!(
        ::std::mem::size_of::<XrEyeGazeSampleTimeEXT>(),
        24usize,
        concat!("Size of: ", stringify!(XrEyeGazeSampleTimeEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrEyeGazeSampleTimeEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrEyeGazeSampleTimeEXT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrEyeGazeSampleTimeEXT>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEyeGazeSampleTimeEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrEyeGazeSampleTimeEXT>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEyeGazeSampleTimeEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrEyeGazeSampleTimeEXT>())).time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEyeGazeSampleTimeEXT),
            "::",
            stringify!(time)
        )
    );
}
pub type XrOverlaySessionCreateFlagsEXTX = XrFlags64;
pub type XrOverlayMainSessionFlagsEXTX = XrFlags64;
pub const XR_OVERLAY_MAIN_SESSION_ENABLED_COMPOSITION_LAYER_INFO_DEPTH_BIT_EXTX:
    XrOverlayMainSessionFlagsEXTX = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSessionCreateInfoOverlayEXTX {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub createFlags: XrOverlaySessionCreateFlagsEXTX,
    pub sessionLayersPlacement: u32,
}
#[test]
fn bindgen_test_layout_XrSessionCreateInfoOverlayEXTX() {
    assert_eq!(
        ::std::mem::size_of::<XrSessionCreateInfoOverlayEXTX>(),
        32usize,
        concat!("Size of: ", stringify!(XrSessionCreateInfoOverlayEXTX))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSessionCreateInfoOverlayEXTX>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSessionCreateInfoOverlayEXTX))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSessionCreateInfoOverlayEXTX>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionCreateInfoOverlayEXTX),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSessionCreateInfoOverlayEXTX>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionCreateInfoOverlayEXTX),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSessionCreateInfoOverlayEXTX>())).createFlags as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionCreateInfoOverlayEXTX),
            "::",
            stringify!(createFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSessionCreateInfoOverlayEXTX>())).sessionLayersPlacement
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSessionCreateInfoOverlayEXTX),
            "::",
            stringify!(sessionLayersPlacement)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataMainSessionVisibilityChangedEXTX {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub visible: XrBool32,
    pub flags: XrOverlayMainSessionFlagsEXTX,
}
#[test]
fn bindgen_test_layout_XrEventDataMainSessionVisibilityChangedEXTX() {
    assert_eq!(
        ::std::mem::size_of::<XrEventDataMainSessionVisibilityChangedEXTX>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(XrEventDataMainSessionVisibilityChangedEXTX)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataMainSessionVisibilityChangedEXTX>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataMainSessionVisibilityChangedEXTX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataMainSessionVisibilityChangedEXTX>())).type_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataMainSessionVisibilityChangedEXTX),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataMainSessionVisibilityChangedEXTX>())).next as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataMainSessionVisibilityChangedEXTX),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataMainSessionVisibilityChangedEXTX>())).visible
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataMainSessionVisibilityChangedEXTX),
            "::",
            stringify!(visible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataMainSessionVisibilityChangedEXTX>())).flags
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataMainSessionVisibilityChangedEXTX),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorMSFT_T {
    _unused: [u8; 0],
}
pub type XrSpatialAnchorMSFT = *mut XrSpatialAnchorMSFT_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorCreateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub space: XrSpace,
    pub pose: XrPosef,
    pub time: XrTime,
}
#[test]
fn bindgen_test_layout_XrSpatialAnchorCreateInfoMSFT() {
    assert_eq!(
        ::std::mem::size_of::<XrSpatialAnchorCreateInfoMSFT>(),
        64usize,
        concat!("Size of: ", stringify!(XrSpatialAnchorCreateInfoMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpatialAnchorCreateInfoMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSpatialAnchorCreateInfoMSFT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSpatialAnchorCreateInfoMSFT>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorCreateInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSpatialAnchorCreateInfoMSFT>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorCreateInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSpatialAnchorCreateInfoMSFT>())).space as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorCreateInfoMSFT),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSpatialAnchorCreateInfoMSFT>())).pose as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorCreateInfoMSFT),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSpatialAnchorCreateInfoMSFT>())).time as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorCreateInfoMSFT),
            "::",
            stringify!(time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorSpaceCreateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub anchor: XrSpatialAnchorMSFT,
    pub poseInAnchorSpace: XrPosef,
}
#[test]
fn bindgen_test_layout_XrSpatialAnchorSpaceCreateInfoMSFT() {
    assert_eq!(
        ::std::mem::size_of::<XrSpatialAnchorSpaceCreateInfoMSFT>(),
        56usize,
        concat!("Size of: ", stringify!(XrSpatialAnchorSpaceCreateInfoMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpatialAnchorSpaceCreateInfoMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSpatialAnchorSpaceCreateInfoMSFT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSpatialAnchorSpaceCreateInfoMSFT>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorSpaceCreateInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSpatialAnchorSpaceCreateInfoMSFT>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorSpaceCreateInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSpatialAnchorSpaceCreateInfoMSFT>())).anchor as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorSpaceCreateInfoMSFT),
            "::",
            stringify!(anchor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSpatialAnchorSpaceCreateInfoMSFT>())).poseInAnchorSpace
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialAnchorSpaceCreateInfoMSFT),
            "::",
            stringify!(poseInAnchorSpace)
        )
    );
}
pub type PFN_xrCreateSpatialAnchorMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrSpatialAnchorCreateInfoMSFT,
        anchor: *mut XrSpatialAnchorMSFT,
    ) -> XrResult,
>;
pub type PFN_xrCreateSpatialAnchorSpaceMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrSpatialAnchorSpaceCreateInfoMSFT,
        space: *mut XrSpace,
    ) -> XrResult,
>;
pub type PFN_xrDestroySpatialAnchorMSFT =
    ::std::option::Option<unsafe extern "C" fn(anchor: XrSpatialAnchorMSFT) -> XrResult>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrViewConfigurationDepthRangeEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub recommendedNearZ: f32,
    pub minNearZ: f32,
    pub recommendedFarZ: f32,
    pub maxFarZ: f32,
}
#[test]
fn bindgen_test_layout_XrViewConfigurationDepthRangeEXT() {
    assert_eq!(
        ::std::mem::size_of::<XrViewConfigurationDepthRangeEXT>(),
        32usize,
        concat!("Size of: ", stringify!(XrViewConfigurationDepthRangeEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrViewConfigurationDepthRangeEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrViewConfigurationDepthRangeEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewConfigurationDepthRangeEXT>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationDepthRangeEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewConfigurationDepthRangeEXT>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationDepthRangeEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewConfigurationDepthRangeEXT>())).recommendedNearZ
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationDepthRangeEXT),
            "::",
            stringify!(recommendedNearZ)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewConfigurationDepthRangeEXT>())).minNearZ as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationDepthRangeEXT),
            "::",
            stringify!(minNearZ)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewConfigurationDepthRangeEXT>())).recommendedFarZ as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationDepthRangeEXT),
            "::",
            stringify!(recommendedFarZ)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewConfigurationDepthRangeEXT>())).maxFarZ as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationDepthRangeEXT),
            "::",
            stringify!(maxFarZ)
        )
    );
}
pub type PFN_xrSetInputDeviceActiveEXT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        interactionProfile: XrPath,
        topLevelPath: XrPath,
        isActive: XrBool32,
    ) -> XrResult,
>;
pub type PFN_xrSetInputDeviceStateBoolEXT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        topLevelPath: XrPath,
        inputSourcePath: XrPath,
        state: XrBool32,
    ) -> XrResult,
>;
pub type PFN_xrSetInputDeviceStateFloatEXT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        topLevelPath: XrPath,
        inputSourcePath: XrPath,
        state: f32,
    ) -> XrResult,
>;
pub type PFN_xrSetInputDeviceStateVector2fEXT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        topLevelPath: XrPath,
        inputSourcePath: XrPath,
        state: XrVector2f,
    ) -> XrResult,
>;
pub type PFN_xrSetInputDeviceLocationEXT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        topLevelPath: XrPath,
        inputSourcePath: XrPath,
        space: XrSpace,
        pose: XrPosef,
    ) -> XrResult,
>;
pub const XrSpatialGraphNodeTypeMSFT_XR_SPATIAL_GRAPH_NODE_TYPE_STATIC_MSFT:
    XrSpatialGraphNodeTypeMSFT = 1;
pub const XrSpatialGraphNodeTypeMSFT_XR_SPATIAL_GRAPH_NODE_TYPE_DYNAMIC_MSFT:
    XrSpatialGraphNodeTypeMSFT = 2;
pub const XrSpatialGraphNodeTypeMSFT_XR_SPATIAL_GRAPH_NODE_TYPE_MAX_ENUM_MSFT:
    XrSpatialGraphNodeTypeMSFT = 2147483647;
pub type XrSpatialGraphNodeTypeMSFT = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialGraphNodeSpaceCreateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub nodeType: XrSpatialGraphNodeTypeMSFT,
    pub nodeId: [u8; 16usize],
    pub pose: XrPosef,
}
#[test]
fn bindgen_test_layout_XrSpatialGraphNodeSpaceCreateInfoMSFT() {
    assert_eq!(
        ::std::mem::size_of::<XrSpatialGraphNodeSpaceCreateInfoMSFT>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(XrSpatialGraphNodeSpaceCreateInfoMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSpatialGraphNodeSpaceCreateInfoMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSpatialGraphNodeSpaceCreateInfoMSFT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSpatialGraphNodeSpaceCreateInfoMSFT>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialGraphNodeSpaceCreateInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSpatialGraphNodeSpaceCreateInfoMSFT>())).next as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialGraphNodeSpaceCreateInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSpatialGraphNodeSpaceCreateInfoMSFT>())).nodeType as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialGraphNodeSpaceCreateInfoMSFT),
            "::",
            stringify!(nodeType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSpatialGraphNodeSpaceCreateInfoMSFT>())).nodeId as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialGraphNodeSpaceCreateInfoMSFT),
            "::",
            stringify!(nodeId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSpatialGraphNodeSpaceCreateInfoMSFT>())).pose as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSpatialGraphNodeSpaceCreateInfoMSFT),
            "::",
            stringify!(pose)
        )
    );
}
pub type PFN_xrCreateSpatialGraphNodeSpaceMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrSpatialGraphNodeSpaceCreateInfoMSFT,
        space: *mut XrSpace,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandTrackerEXT_T {
    _unused: [u8; 0],
}
pub type XrHandTrackerEXT = *mut XrHandTrackerEXT_T;
pub const XrHandEXT_XR_HAND_LEFT_EXT: XrHandEXT = 1;
pub const XrHandEXT_XR_HAND_RIGHT_EXT: XrHandEXT = 2;
pub const XrHandEXT_XR_HAND_MAX_ENUM_EXT: XrHandEXT = 2147483647;
pub type XrHandEXT = i32;
pub const XrHandJointEXT_XR_HAND_JOINT_PALM_EXT: XrHandJointEXT = 0;
pub const XrHandJointEXT_XR_HAND_JOINT_WRIST_EXT: XrHandJointEXT = 1;
pub const XrHandJointEXT_XR_HAND_JOINT_THUMB_METACARPAL_EXT: XrHandJointEXT = 2;
pub const XrHandJointEXT_XR_HAND_JOINT_THUMB_PROXIMAL_EXT: XrHandJointEXT = 3;
pub const XrHandJointEXT_XR_HAND_JOINT_THUMB_DISTAL_EXT: XrHandJointEXT = 4;
pub const XrHandJointEXT_XR_HAND_JOINT_THUMB_TIP_EXT: XrHandJointEXT = 5;
pub const XrHandJointEXT_XR_HAND_JOINT_INDEX_METACARPAL_EXT: XrHandJointEXT = 6;
pub const XrHandJointEXT_XR_HAND_JOINT_INDEX_PROXIMAL_EXT: XrHandJointEXT = 7;
pub const XrHandJointEXT_XR_HAND_JOINT_INDEX_INTERMEDIATE_EXT: XrHandJointEXT = 8;
pub const XrHandJointEXT_XR_HAND_JOINT_INDEX_DISTAL_EXT: XrHandJointEXT = 9;
pub const XrHandJointEXT_XR_HAND_JOINT_INDEX_TIP_EXT: XrHandJointEXT = 10;
pub const XrHandJointEXT_XR_HAND_JOINT_MIDDLE_METACARPAL_EXT: XrHandJointEXT = 11;
pub const XrHandJointEXT_XR_HAND_JOINT_MIDDLE_PROXIMAL_EXT: XrHandJointEXT = 12;
pub const XrHandJointEXT_XR_HAND_JOINT_MIDDLE_INTERMEDIATE_EXT: XrHandJointEXT = 13;
pub const XrHandJointEXT_XR_HAND_JOINT_MIDDLE_DISTAL_EXT: XrHandJointEXT = 14;
pub const XrHandJointEXT_XR_HAND_JOINT_MIDDLE_TIP_EXT: XrHandJointEXT = 15;
pub const XrHandJointEXT_XR_HAND_JOINT_RING_METACARPAL_EXT: XrHandJointEXT = 16;
pub const XrHandJointEXT_XR_HAND_JOINT_RING_PROXIMAL_EXT: XrHandJointEXT = 17;
pub const XrHandJointEXT_XR_HAND_JOINT_RING_INTERMEDIATE_EXT: XrHandJointEXT = 18;
pub const XrHandJointEXT_XR_HAND_JOINT_RING_DISTAL_EXT: XrHandJointEXT = 19;
pub const XrHandJointEXT_XR_HAND_JOINT_RING_TIP_EXT: XrHandJointEXT = 20;
pub const XrHandJointEXT_XR_HAND_JOINT_LITTLE_METACARPAL_EXT: XrHandJointEXT = 21;
pub const XrHandJointEXT_XR_HAND_JOINT_LITTLE_PROXIMAL_EXT: XrHandJointEXT = 22;
pub const XrHandJointEXT_XR_HAND_JOINT_LITTLE_INTERMEDIATE_EXT: XrHandJointEXT = 23;
pub const XrHandJointEXT_XR_HAND_JOINT_LITTLE_DISTAL_EXT: XrHandJointEXT = 24;
pub const XrHandJointEXT_XR_HAND_JOINT_LITTLE_TIP_EXT: XrHandJointEXT = 25;
pub const XrHandJointEXT_XR_HAND_JOINT_MAX_ENUM_EXT: XrHandJointEXT = 2147483647;
pub type XrHandJointEXT = i32;
pub const XrHandJointSetEXT_XR_HAND_JOINT_SET_DEFAULT_EXT: XrHandJointSetEXT = 0;
pub const XrHandJointSetEXT_XR_HAND_JOINT_SET_MAX_ENUM_EXT: XrHandJointSetEXT = 2147483647;
pub type XrHandJointSetEXT = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemHandTrackingPropertiesEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsHandTracking: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemHandTrackingPropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<XrSystemHandTrackingPropertiesEXT>(),
        24usize,
        concat!("Size of: ", stringify!(XrSystemHandTrackingPropertiesEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemHandTrackingPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemHandTrackingPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemHandTrackingPropertiesEXT>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemHandTrackingPropertiesEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemHandTrackingPropertiesEXT>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemHandTrackingPropertiesEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemHandTrackingPropertiesEXT>())).supportsHandTracking
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemHandTrackingPropertiesEXT),
            "::",
            stringify!(supportsHandTracking)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandTrackerCreateInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub hand: XrHandEXT,
    pub handJointSet: XrHandJointSetEXT,
}
#[test]
fn bindgen_test_layout_XrHandTrackerCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<XrHandTrackerCreateInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(XrHandTrackerCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandTrackerCreateInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandTrackerCreateInfoEXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandTrackerCreateInfoEXT>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackerCreateInfoEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHandTrackerCreateInfoEXT>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackerCreateInfoEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHandTrackerCreateInfoEXT>())).hand as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackerCreateInfoEXT),
            "::",
            stringify!(hand)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandTrackerCreateInfoEXT>())).handJointSet as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandTrackerCreateInfoEXT),
            "::",
            stringify!(handJointSet)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandJointsLocateInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub baseSpace: XrSpace,
    pub time: XrTime,
}
#[test]
fn bindgen_test_layout_XrHandJointsLocateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<XrHandJointsLocateInfoEXT>(),
        32usize,
        concat!("Size of: ", stringify!(XrHandJointsLocateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandJointsLocateInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandJointsLocateInfoEXT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHandJointsLocateInfoEXT>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointsLocateInfoEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHandJointsLocateInfoEXT>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointsLocateInfoEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandJointsLocateInfoEXT>())).baseSpace as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointsLocateInfoEXT),
            "::",
            stringify!(baseSpace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHandJointsLocateInfoEXT>())).time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointsLocateInfoEXT),
            "::",
            stringify!(time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandJointLocationEXT {
    pub locationFlags: XrSpaceLocationFlags,
    pub pose: XrPosef,
    pub radius: f32,
}
#[test]
fn bindgen_test_layout_XrHandJointLocationEXT() {
    assert_eq!(
        ::std::mem::size_of::<XrHandJointLocationEXT>(),
        40usize,
        concat!("Size of: ", stringify!(XrHandJointLocationEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandJointLocationEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandJointLocationEXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandJointLocationEXT>())).locationFlags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointLocationEXT),
            "::",
            stringify!(locationFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHandJointLocationEXT>())).pose as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointLocationEXT),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHandJointLocationEXT>())).radius as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointLocationEXT),
            "::",
            stringify!(radius)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandJointVelocityEXT {
    pub velocityFlags: XrSpaceVelocityFlags,
    pub linearVelocity: XrVector3f,
    pub angularVelocity: XrVector3f,
}
#[test]
fn bindgen_test_layout_XrHandJointVelocityEXT() {
    assert_eq!(
        ::std::mem::size_of::<XrHandJointVelocityEXT>(),
        32usize,
        concat!("Size of: ", stringify!(XrHandJointVelocityEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandJointVelocityEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandJointVelocityEXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandJointVelocityEXT>())).velocityFlags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointVelocityEXT),
            "::",
            stringify!(velocityFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandJointVelocityEXT>())).linearVelocity as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointVelocityEXT),
            "::",
            stringify!(linearVelocity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandJointVelocityEXT>())).angularVelocity as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointVelocityEXT),
            "::",
            stringify!(angularVelocity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandJointLocationsEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub isActive: XrBool32,
    pub jointCount: u32,
    pub jointLocations: *mut XrHandJointLocationEXT,
}
#[test]
fn bindgen_test_layout_XrHandJointLocationsEXT() {
    assert_eq!(
        ::std::mem::size_of::<XrHandJointLocationsEXT>(),
        32usize,
        concat!("Size of: ", stringify!(XrHandJointLocationsEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandJointLocationsEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandJointLocationsEXT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHandJointLocationsEXT>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointLocationsEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHandJointLocationsEXT>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointLocationsEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandJointLocationsEXT>())).isActive as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointLocationsEXT),
            "::",
            stringify!(isActive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandJointLocationsEXT>())).jointCount as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointLocationsEXT),
            "::",
            stringify!(jointCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandJointLocationsEXT>())).jointLocations as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointLocationsEXT),
            "::",
            stringify!(jointLocations)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandJointVelocitiesEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub jointCount: u32,
    pub jointVelocities: *mut XrHandJointVelocityEXT,
}
#[test]
fn bindgen_test_layout_XrHandJointVelocitiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<XrHandJointVelocitiesEXT>(),
        32usize,
        concat!("Size of: ", stringify!(XrHandJointVelocitiesEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandJointVelocitiesEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandJointVelocitiesEXT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHandJointVelocitiesEXT>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointVelocitiesEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHandJointVelocitiesEXT>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointVelocitiesEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandJointVelocitiesEXT>())).jointCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointVelocitiesEXT),
            "::",
            stringify!(jointCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandJointVelocitiesEXT>())).jointVelocities as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointVelocitiesEXT),
            "::",
            stringify!(jointVelocities)
        )
    );
}
pub type PFN_xrCreateHandTrackerEXT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        createInfo: *const XrHandTrackerCreateInfoEXT,
        handTracker: *mut XrHandTrackerEXT,
    ) -> XrResult,
>;
pub type PFN_xrDestroyHandTrackerEXT =
    ::std::option::Option<unsafe extern "C" fn(handTracker: XrHandTrackerEXT) -> XrResult>;
pub type PFN_xrLocateHandJointsEXT = ::std::option::Option<
    unsafe extern "C" fn(
        handTracker: XrHandTrackerEXT,
        locateInfo: *const XrHandJointsLocateInfoEXT,
        locations: *mut XrHandJointLocationsEXT,
    ) -> XrResult,
>;
pub const XrHandPoseTypeMSFT_XR_HAND_POSE_TYPE_TRACKED_MSFT: XrHandPoseTypeMSFT = 0;
pub const XrHandPoseTypeMSFT_XR_HAND_POSE_TYPE_REFERENCE_OPEN_PALM_MSFT: XrHandPoseTypeMSFT = 1;
pub const XrHandPoseTypeMSFT_XR_HAND_POSE_TYPE_MAX_ENUM_MSFT: XrHandPoseTypeMSFT = 2147483647;
pub type XrHandPoseTypeMSFT = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemHandTrackingMeshPropertiesMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsHandTrackingMesh: XrBool32,
    pub maxHandMeshIndexCount: u32,
    pub maxHandMeshVertexCount: u32,
}
#[test]
fn bindgen_test_layout_XrSystemHandTrackingMeshPropertiesMSFT() {
    assert_eq!(
        ::std::mem::size_of::<XrSystemHandTrackingMeshPropertiesMSFT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(XrSystemHandTrackingMeshPropertiesMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemHandTrackingMeshPropertiesMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemHandTrackingMeshPropertiesMSFT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemHandTrackingMeshPropertiesMSFT>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemHandTrackingMeshPropertiesMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemHandTrackingMeshPropertiesMSFT>())).next as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemHandTrackingMeshPropertiesMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemHandTrackingMeshPropertiesMSFT>()))
                .supportsHandTrackingMesh as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemHandTrackingMeshPropertiesMSFT),
            "::",
            stringify!(supportsHandTrackingMesh)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemHandTrackingMeshPropertiesMSFT>())).maxHandMeshIndexCount
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemHandTrackingMeshPropertiesMSFT),
            "::",
            stringify!(maxHandMeshIndexCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemHandTrackingMeshPropertiesMSFT>()))
                .maxHandMeshVertexCount as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemHandTrackingMeshPropertiesMSFT),
            "::",
            stringify!(maxHandMeshVertexCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandMeshSpaceCreateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub handPoseType: XrHandPoseTypeMSFT,
    pub poseInHandMeshSpace: XrPosef,
}
#[test]
fn bindgen_test_layout_XrHandMeshSpaceCreateInfoMSFT() {
    assert_eq!(
        ::std::mem::size_of::<XrHandMeshSpaceCreateInfoMSFT>(),
        48usize,
        concat!("Size of: ", stringify!(XrHandMeshSpaceCreateInfoMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandMeshSpaceCreateInfoMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandMeshSpaceCreateInfoMSFT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandMeshSpaceCreateInfoMSFT>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshSpaceCreateInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandMeshSpaceCreateInfoMSFT>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshSpaceCreateInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandMeshSpaceCreateInfoMSFT>())).handPoseType as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshSpaceCreateInfoMSFT),
            "::",
            stringify!(handPoseType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandMeshSpaceCreateInfoMSFT>())).poseInHandMeshSpace
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshSpaceCreateInfoMSFT),
            "::",
            stringify!(poseInHandMeshSpace)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandMeshUpdateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub time: XrTime,
    pub handPoseType: XrHandPoseTypeMSFT,
}
#[test]
fn bindgen_test_layout_XrHandMeshUpdateInfoMSFT() {
    assert_eq!(
        ::std::mem::size_of::<XrHandMeshUpdateInfoMSFT>(),
        32usize,
        concat!("Size of: ", stringify!(XrHandMeshUpdateInfoMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandMeshUpdateInfoMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandMeshUpdateInfoMSFT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHandMeshUpdateInfoMSFT>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshUpdateInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHandMeshUpdateInfoMSFT>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshUpdateInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHandMeshUpdateInfoMSFT>())).time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshUpdateInfoMSFT),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandMeshUpdateInfoMSFT>())).handPoseType as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshUpdateInfoMSFT),
            "::",
            stringify!(handPoseType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandMeshIndexBufferMSFT {
    pub indexBufferKey: u32,
    pub indexCapacityInput: u32,
    pub indexCountOutput: u32,
    pub indices: *mut u32,
}
#[test]
fn bindgen_test_layout_XrHandMeshIndexBufferMSFT() {
    assert_eq!(
        ::std::mem::size_of::<XrHandMeshIndexBufferMSFT>(),
        24usize,
        concat!("Size of: ", stringify!(XrHandMeshIndexBufferMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandMeshIndexBufferMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandMeshIndexBufferMSFT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandMeshIndexBufferMSFT>())).indexBufferKey as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshIndexBufferMSFT),
            "::",
            stringify!(indexBufferKey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandMeshIndexBufferMSFT>())).indexCapacityInput as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshIndexBufferMSFT),
            "::",
            stringify!(indexCapacityInput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandMeshIndexBufferMSFT>())).indexCountOutput as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshIndexBufferMSFT),
            "::",
            stringify!(indexCountOutput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandMeshIndexBufferMSFT>())).indices as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshIndexBufferMSFT),
            "::",
            stringify!(indices)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandMeshVertexMSFT {
    pub position: XrVector3f,
    pub normal: XrVector3f,
}
#[test]
fn bindgen_test_layout_XrHandMeshVertexMSFT() {
    assert_eq!(
        ::std::mem::size_of::<XrHandMeshVertexMSFT>(),
        24usize,
        concat!("Size of: ", stringify!(XrHandMeshVertexMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandMeshVertexMSFT>(),
        4usize,
        concat!("Alignment of ", stringify!(XrHandMeshVertexMSFT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHandMeshVertexMSFT>())).position as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshVertexMSFT),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHandMeshVertexMSFT>())).normal as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshVertexMSFT),
            "::",
            stringify!(normal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandMeshVertexBufferMSFT {
    pub vertexUpdateTime: XrTime,
    pub vertexCapacityInput: u32,
    pub vertexCountOutput: u32,
    pub vertices: *mut XrHandMeshVertexMSFT,
}
#[test]
fn bindgen_test_layout_XrHandMeshVertexBufferMSFT() {
    assert_eq!(
        ::std::mem::size_of::<XrHandMeshVertexBufferMSFT>(),
        24usize,
        concat!("Size of: ", stringify!(XrHandMeshVertexBufferMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandMeshVertexBufferMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandMeshVertexBufferMSFT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandMeshVertexBufferMSFT>())).vertexUpdateTime as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshVertexBufferMSFT),
            "::",
            stringify!(vertexUpdateTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandMeshVertexBufferMSFT>())).vertexCapacityInput as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshVertexBufferMSFT),
            "::",
            stringify!(vertexCapacityInput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandMeshVertexBufferMSFT>())).vertexCountOutput as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshVertexBufferMSFT),
            "::",
            stringify!(vertexCountOutput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandMeshVertexBufferMSFT>())).vertices as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshVertexBufferMSFT),
            "::",
            stringify!(vertices)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandMeshMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub isActive: XrBool32,
    pub indexBufferChanged: XrBool32,
    pub vertexBufferChanged: XrBool32,
    pub indexBuffer: XrHandMeshIndexBufferMSFT,
    pub vertexBuffer: XrHandMeshVertexBufferMSFT,
}
#[test]
fn bindgen_test_layout_XrHandMeshMSFT() {
    assert_eq!(
        ::std::mem::size_of::<XrHandMeshMSFT>(),
        80usize,
        concat!("Size of: ", stringify!(XrHandMeshMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandMeshMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandMeshMSFT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHandMeshMSFT>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHandMeshMSFT>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHandMeshMSFT>())).isActive as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshMSFT),
            "::",
            stringify!(isActive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandMeshMSFT>())).indexBufferChanged as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshMSFT),
            "::",
            stringify!(indexBufferChanged)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandMeshMSFT>())).vertexBufferChanged as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshMSFT),
            "::",
            stringify!(vertexBufferChanged)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHandMeshMSFT>())).indexBuffer as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshMSFT),
            "::",
            stringify!(indexBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHandMeshMSFT>())).vertexBuffer as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandMeshMSFT),
            "::",
            stringify!(vertexBuffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandPoseTypeInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub handPoseType: XrHandPoseTypeMSFT,
}
#[test]
fn bindgen_test_layout_XrHandPoseTypeInfoMSFT() {
    assert_eq!(
        ::std::mem::size_of::<XrHandPoseTypeInfoMSFT>(),
        24usize,
        concat!("Size of: ", stringify!(XrHandPoseTypeInfoMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandPoseTypeInfoMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandPoseTypeInfoMSFT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHandPoseTypeInfoMSFT>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandPoseTypeInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrHandPoseTypeInfoMSFT>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandPoseTypeInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandPoseTypeInfoMSFT>())).handPoseType as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandPoseTypeInfoMSFT),
            "::",
            stringify!(handPoseType)
        )
    );
}
pub type PFN_xrCreateHandMeshSpaceMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        handTracker: XrHandTrackerEXT,
        createInfo: *const XrHandMeshSpaceCreateInfoMSFT,
        space: *mut XrSpace,
    ) -> XrResult,
>;
pub type PFN_xrUpdateHandMeshMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        handTracker: XrHandTrackerEXT,
        updateInfo: *const XrHandMeshUpdateInfoMSFT,
        handMesh: *mut XrHandMeshMSFT,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSecondaryViewConfigurationSessionBeginInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub viewConfigurationCount: u32,
    pub enabledViewConfigurationTypes: *const XrViewConfigurationType,
}
#[test]
fn bindgen_test_layout_XrSecondaryViewConfigurationSessionBeginInfoMSFT() {
    assert_eq!(
        ::std::mem::size_of::<XrSecondaryViewConfigurationSessionBeginInfoMSFT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(XrSecondaryViewConfigurationSessionBeginInfoMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSecondaryViewConfigurationSessionBeginInfoMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSecondaryViewConfigurationSessionBeginInfoMSFT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationSessionBeginInfoMSFT>())).type_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationSessionBeginInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationSessionBeginInfoMSFT>())).next
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationSessionBeginInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationSessionBeginInfoMSFT>()))
                .viewConfigurationCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationSessionBeginInfoMSFT),
            "::",
            stringify!(viewConfigurationCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationSessionBeginInfoMSFT>()))
                .enabledViewConfigurationTypes as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationSessionBeginInfoMSFT),
            "::",
            stringify!(enabledViewConfigurationTypes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSecondaryViewConfigurationStateMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub viewConfigurationType: XrViewConfigurationType,
    pub active: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSecondaryViewConfigurationStateMSFT() {
    assert_eq!(
        ::std::mem::size_of::<XrSecondaryViewConfigurationStateMSFT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrSecondaryViewConfigurationStateMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSecondaryViewConfigurationStateMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSecondaryViewConfigurationStateMSFT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationStateMSFT>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationStateMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationStateMSFT>())).next as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationStateMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationStateMSFT>())).viewConfigurationType
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationStateMSFT),
            "::",
            stringify!(viewConfigurationType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationStateMSFT>())).active as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationStateMSFT),
            "::",
            stringify!(active)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSecondaryViewConfigurationFrameStateMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub viewConfigurationCount: u32,
    pub viewConfigurationStates: *mut XrSecondaryViewConfigurationStateMSFT,
}
#[test]
fn bindgen_test_layout_XrSecondaryViewConfigurationFrameStateMSFT() {
    assert_eq!(
        ::std::mem::size_of::<XrSecondaryViewConfigurationFrameStateMSFT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(XrSecondaryViewConfigurationFrameStateMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSecondaryViewConfigurationFrameStateMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSecondaryViewConfigurationFrameStateMSFT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationFrameStateMSFT>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationFrameStateMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationFrameStateMSFT>())).next as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationFrameStateMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationFrameStateMSFT>()))
                .viewConfigurationCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationFrameStateMSFT),
            "::",
            stringify!(viewConfigurationCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationFrameStateMSFT>()))
                .viewConfigurationStates as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationFrameStateMSFT),
            "::",
            stringify!(viewConfigurationStates)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSecondaryViewConfigurationLayerInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub viewConfigurationType: XrViewConfigurationType,
    pub environmentBlendMode: XrEnvironmentBlendMode,
    pub layerCount: u32,
    pub layers: *const *const XrCompositionLayerBaseHeader,
}
#[test]
fn bindgen_test_layout_XrSecondaryViewConfigurationLayerInfoMSFT() {
    assert_eq!(
        ::std::mem::size_of::<XrSecondaryViewConfigurationLayerInfoMSFT>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(XrSecondaryViewConfigurationLayerInfoMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSecondaryViewConfigurationLayerInfoMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSecondaryViewConfigurationLayerInfoMSFT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationLayerInfoMSFT>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationLayerInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationLayerInfoMSFT>())).next as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationLayerInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationLayerInfoMSFT>()))
                .viewConfigurationType as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationLayerInfoMSFT),
            "::",
            stringify!(viewConfigurationType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationLayerInfoMSFT>()))
                .environmentBlendMode as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationLayerInfoMSFT),
            "::",
            stringify!(environmentBlendMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationLayerInfoMSFT>())).layerCount
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationLayerInfoMSFT),
            "::",
            stringify!(layerCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationLayerInfoMSFT>())).layers as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationLayerInfoMSFT),
            "::",
            stringify!(layers)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSecondaryViewConfigurationFrameEndInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub viewConfigurationCount: u32,
    pub viewConfigurationLayersInfo: *const XrSecondaryViewConfigurationLayerInfoMSFT,
}
#[test]
fn bindgen_test_layout_XrSecondaryViewConfigurationFrameEndInfoMSFT() {
    assert_eq!(
        ::std::mem::size_of::<XrSecondaryViewConfigurationFrameEndInfoMSFT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(XrSecondaryViewConfigurationFrameEndInfoMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSecondaryViewConfigurationFrameEndInfoMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSecondaryViewConfigurationFrameEndInfoMSFT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationFrameEndInfoMSFT>())).type_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationFrameEndInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationFrameEndInfoMSFT>())).next
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationFrameEndInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationFrameEndInfoMSFT>()))
                .viewConfigurationCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationFrameEndInfoMSFT),
            "::",
            stringify!(viewConfigurationCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationFrameEndInfoMSFT>()))
                .viewConfigurationLayersInfo as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationFrameEndInfoMSFT),
            "::",
            stringify!(viewConfigurationLayersInfo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSecondaryViewConfigurationSwapchainCreateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub viewConfigurationType: XrViewConfigurationType,
}
#[test]
fn bindgen_test_layout_XrSecondaryViewConfigurationSwapchainCreateInfoMSFT() {
    assert_eq!(
        ::std::mem::size_of::<XrSecondaryViewConfigurationSwapchainCreateInfoMSFT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrSecondaryViewConfigurationSwapchainCreateInfoMSFT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSecondaryViewConfigurationSwapchainCreateInfoMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSecondaryViewConfigurationSwapchainCreateInfoMSFT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationSwapchainCreateInfoMSFT>())).type_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationSwapchainCreateInfoMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationSwapchainCreateInfoMSFT>())).next
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationSwapchainCreateInfoMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSecondaryViewConfigurationSwapchainCreateInfoMSFT>()))
                .viewConfigurationType as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSecondaryViewConfigurationSwapchainCreateInfoMSFT),
            "::",
            stringify!(viewConfigurationType)
        )
    );
}
pub type XrControllerModelKeyMSFT = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrControllerModelKeyStateMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub modelKey: XrControllerModelKeyMSFT,
}
#[test]
fn bindgen_test_layout_XrControllerModelKeyStateMSFT() {
    assert_eq!(
        ::std::mem::size_of::<XrControllerModelKeyStateMSFT>(),
        24usize,
        concat!("Size of: ", stringify!(XrControllerModelKeyStateMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrControllerModelKeyStateMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrControllerModelKeyStateMSFT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrControllerModelKeyStateMSFT>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelKeyStateMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrControllerModelKeyStateMSFT>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelKeyStateMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrControllerModelKeyStateMSFT>())).modelKey as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelKeyStateMSFT),
            "::",
            stringify!(modelKey)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XrControllerModelNodePropertiesMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub parentNodeName: [::std::os::raw::c_char; 64usize],
    pub nodeName: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_XrControllerModelNodePropertiesMSFT() {
    assert_eq!(
        ::std::mem::size_of::<XrControllerModelNodePropertiesMSFT>(),
        144usize,
        concat!("Size of: ", stringify!(XrControllerModelNodePropertiesMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrControllerModelNodePropertiesMSFT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrControllerModelNodePropertiesMSFT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrControllerModelNodePropertiesMSFT>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelNodePropertiesMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrControllerModelNodePropertiesMSFT>())).next as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelNodePropertiesMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrControllerModelNodePropertiesMSFT>())).parentNodeName
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelNodePropertiesMSFT),
            "::",
            stringify!(parentNodeName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrControllerModelNodePropertiesMSFT>())).nodeName as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelNodePropertiesMSFT),
            "::",
            stringify!(nodeName)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrControllerModelPropertiesMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub nodeCapacityInput: u32,
    pub nodeCountOutput: u32,
    pub nodeProperties: *mut XrControllerModelNodePropertiesMSFT,
}
#[test]
fn bindgen_test_layout_XrControllerModelPropertiesMSFT() {
    assert_eq!(
        ::std::mem::size_of::<XrControllerModelPropertiesMSFT>(),
        32usize,
        concat!("Size of: ", stringify!(XrControllerModelPropertiesMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrControllerModelPropertiesMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrControllerModelPropertiesMSFT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrControllerModelPropertiesMSFT>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelPropertiesMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrControllerModelPropertiesMSFT>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelPropertiesMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrControllerModelPropertiesMSFT>())).nodeCapacityInput
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelPropertiesMSFT),
            "::",
            stringify!(nodeCapacityInput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrControllerModelPropertiesMSFT>())).nodeCountOutput as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelPropertiesMSFT),
            "::",
            stringify!(nodeCountOutput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrControllerModelPropertiesMSFT>())).nodeProperties as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelPropertiesMSFT),
            "::",
            stringify!(nodeProperties)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrControllerModelNodeStateMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub nodePose: XrPosef,
}
#[test]
fn bindgen_test_layout_XrControllerModelNodeStateMSFT() {
    assert_eq!(
        ::std::mem::size_of::<XrControllerModelNodeStateMSFT>(),
        48usize,
        concat!("Size of: ", stringify!(XrControllerModelNodeStateMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrControllerModelNodeStateMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrControllerModelNodeStateMSFT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrControllerModelNodeStateMSFT>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelNodeStateMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrControllerModelNodeStateMSFT>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelNodeStateMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrControllerModelNodeStateMSFT>())).nodePose as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelNodeStateMSFT),
            "::",
            stringify!(nodePose)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrControllerModelStateMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub nodeCapacityInput: u32,
    pub nodeCountOutput: u32,
    pub nodeStates: *mut XrControllerModelNodeStateMSFT,
}
#[test]
fn bindgen_test_layout_XrControllerModelStateMSFT() {
    assert_eq!(
        ::std::mem::size_of::<XrControllerModelStateMSFT>(),
        32usize,
        concat!("Size of: ", stringify!(XrControllerModelStateMSFT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrControllerModelStateMSFT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrControllerModelStateMSFT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrControllerModelStateMSFT>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelStateMSFT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrControllerModelStateMSFT>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelStateMSFT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrControllerModelStateMSFT>())).nodeCapacityInput as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelStateMSFT),
            "::",
            stringify!(nodeCapacityInput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrControllerModelStateMSFT>())).nodeCountOutput as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelStateMSFT),
            "::",
            stringify!(nodeCountOutput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrControllerModelStateMSFT>())).nodeStates as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrControllerModelStateMSFT),
            "::",
            stringify!(nodeStates)
        )
    );
}
pub type PFN_xrGetControllerModelKeyMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        topLevelUserPath: XrPath,
        controllerModelKeyState: *mut XrControllerModelKeyStateMSFT,
    ) -> XrResult,
>;
pub type PFN_xrLoadControllerModelMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        modelKey: XrControllerModelKeyMSFT,
        bufferCapacityInput: u32,
        bufferCountOutput: *mut u32,
        buffer: *mut u8,
    ) -> XrResult,
>;
pub type PFN_xrGetControllerModelPropertiesMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        modelKey: XrControllerModelKeyMSFT,
        properties: *mut XrControllerModelPropertiesMSFT,
    ) -> XrResult,
>;
pub type PFN_xrGetControllerModelStateMSFT = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        modelKey: XrControllerModelKeyMSFT,
        state: *mut XrControllerModelStateMSFT,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrViewConfigurationViewFovEPIC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub recommendedFov: XrFovf,
    pub maxMutableFov: XrFovf,
}
#[test]
fn bindgen_test_layout_XrViewConfigurationViewFovEPIC() {
    assert_eq!(
        ::std::mem::size_of::<XrViewConfigurationViewFovEPIC>(),
        48usize,
        concat!("Size of: ", stringify!(XrViewConfigurationViewFovEPIC))
    );
    assert_eq!(
        ::std::mem::align_of::<XrViewConfigurationViewFovEPIC>(),
        8usize,
        concat!("Alignment of ", stringify!(XrViewConfigurationViewFovEPIC))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewConfigurationViewFovEPIC>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationViewFovEPIC),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewConfigurationViewFovEPIC>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationViewFovEPIC),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewConfigurationViewFovEPIC>())).recommendedFov as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationViewFovEPIC),
            "::",
            stringify!(recommendedFov)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewConfigurationViewFovEPIC>())).maxMutableFov as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewConfigurationViewFovEPIC),
            "::",
            stringify!(maxMutableFov)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrInteractionProfileAnalogThresholdVALVE {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub action: XrAction,
    pub binding: XrPath,
    pub onThreshold: f32,
    pub offThreshold: f32,
    pub onHaptic: *const XrHapticBaseHeader,
    pub offHaptic: *const XrHapticBaseHeader,
}
#[test]
fn bindgen_test_layout_XrInteractionProfileAnalogThresholdVALVE() {
    assert_eq!(
        ::std::mem::size_of::<XrInteractionProfileAnalogThresholdVALVE>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(XrInteractionProfileAnalogThresholdVALVE)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrInteractionProfileAnalogThresholdVALVE>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrInteractionProfileAnalogThresholdVALVE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInteractionProfileAnalogThresholdVALVE>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileAnalogThresholdVALVE),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInteractionProfileAnalogThresholdVALVE>())).next as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileAnalogThresholdVALVE),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInteractionProfileAnalogThresholdVALVE>())).action as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileAnalogThresholdVALVE),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInteractionProfileAnalogThresholdVALVE>())).binding as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileAnalogThresholdVALVE),
            "::",
            stringify!(binding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInteractionProfileAnalogThresholdVALVE>())).onThreshold
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileAnalogThresholdVALVE),
            "::",
            stringify!(onThreshold)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInteractionProfileAnalogThresholdVALVE>())).offThreshold
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileAnalogThresholdVALVE),
            "::",
            stringify!(offThreshold)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInteractionProfileAnalogThresholdVALVE>())).onHaptic
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileAnalogThresholdVALVE),
            "::",
            stringify!(onHaptic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrInteractionProfileAnalogThresholdVALVE>())).offHaptic
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XrInteractionProfileAnalogThresholdVALVE),
            "::",
            stringify!(offHaptic)
        )
    );
}
pub const XrHandJointsMotionRangeEXT_XR_HAND_JOINTS_MOTION_RANGE_UNOBSTRUCTED_EXT:
    XrHandJointsMotionRangeEXT = 1;
pub const XrHandJointsMotionRangeEXT_XR_HAND_JOINTS_MOTION_RANGE_CONFORMING_TO_CONTROLLER_EXT:
    XrHandJointsMotionRangeEXT = 2;
pub const XrHandJointsMotionRangeEXT_XR_HAND_JOINTS_MOTION_RANGE_MAX_ENUM_EXT:
    XrHandJointsMotionRangeEXT = 2147483647;
pub type XrHandJointsMotionRangeEXT = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandJointsMotionRangeInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub handJointsMotionRange: XrHandJointsMotionRangeEXT,
}
#[test]
fn bindgen_test_layout_XrHandJointsMotionRangeInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<XrHandJointsMotionRangeInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(XrHandJointsMotionRangeInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<XrHandJointsMotionRangeInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(XrHandJointsMotionRangeInfoEXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandJointsMotionRangeInfoEXT>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointsMotionRangeInfoEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandJointsMotionRangeInfoEXT>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointsMotionRangeInfoEXT),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrHandJointsMotionRangeInfoEXT>())).handJointsMotionRange
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrHandJointsMotionRangeInfoEXT),
            "::",
            stringify!(handJointsMotionRange)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataDisplayRefreshRateChangedFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub fromDisplayRefreshRate: f32,
    pub toDisplayRefreshRate: f32,
}
#[test]
fn bindgen_test_layout_XrEventDataDisplayRefreshRateChangedFB() {
    assert_eq!(
        ::std::mem::size_of::<XrEventDataDisplayRefreshRateChangedFB>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrEventDataDisplayRefreshRateChangedFB)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrEventDataDisplayRefreshRateChangedFB>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrEventDataDisplayRefreshRateChangedFB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataDisplayRefreshRateChangedFB>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataDisplayRefreshRateChangedFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataDisplayRefreshRateChangedFB>())).next as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataDisplayRefreshRateChangedFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataDisplayRefreshRateChangedFB>()))
                .fromDisplayRefreshRate as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataDisplayRefreshRateChangedFB),
            "::",
            stringify!(fromDisplayRefreshRate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrEventDataDisplayRefreshRateChangedFB>())).toDisplayRefreshRate
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrEventDataDisplayRefreshRateChangedFB),
            "::",
            stringify!(toDisplayRefreshRate)
        )
    );
}
pub type PFN_xrEnumerateDisplayRefreshRatesFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        displayRefreshRateCapacityInput: u32,
        displayRefreshRateCountOutput: *mut u32,
        displayRefreshRates: *mut f32,
    ) -> XrResult,
>;
pub type PFN_xrGetDisplayRefreshRateFB = ::std::option::Option<
    unsafe extern "C" fn(session: XrSession, displayRefreshRate: *mut f32) -> XrResult,
>;
pub type PFN_xrRequestDisplayRefreshRateFB = ::std::option::Option<
    unsafe extern "C" fn(session: XrSession, displayRefreshRate: f32) -> XrResult,
>;
pub const XrColorSpaceFB_XR_COLOR_SPACE_UNMANAGED_FB: XrColorSpaceFB = 0;
pub const XrColorSpaceFB_XR_COLOR_SPACE_REC2020_FB: XrColorSpaceFB = 1;
pub const XrColorSpaceFB_XR_COLOR_SPACE_REC709_FB: XrColorSpaceFB = 2;
pub const XrColorSpaceFB_XR_COLOR_SPACE_RIFT_CV1_FB: XrColorSpaceFB = 3;
pub const XrColorSpaceFB_XR_COLOR_SPACE_RIFT_S_FB: XrColorSpaceFB = 4;
pub const XrColorSpaceFB_XR_COLOR_SPACE_QUEST_FB: XrColorSpaceFB = 5;
pub const XrColorSpaceFB_XR_COLOR_SPACE_P3_FB: XrColorSpaceFB = 6;
pub const XrColorSpaceFB_XR_COLOR_SPACE_ADOBE_RGB_FB: XrColorSpaceFB = 7;
pub const XrColorSpaceFB_XR_COLOR_SPACE_MAX_ENUM_FB: XrColorSpaceFB = 2147483647;
pub type XrColorSpaceFB = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemColorSpacePropertiesFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub colorSpace: XrColorSpaceFB,
}
#[test]
fn bindgen_test_layout_XrSystemColorSpacePropertiesFB() {
    assert_eq!(
        ::std::mem::size_of::<XrSystemColorSpacePropertiesFB>(),
        24usize,
        concat!("Size of: ", stringify!(XrSystemColorSpacePropertiesFB))
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemColorSpacePropertiesFB>(),
        8usize,
        concat!("Alignment of ", stringify!(XrSystemColorSpacePropertiesFB))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemColorSpacePropertiesFB>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemColorSpacePropertiesFB),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemColorSpacePropertiesFB>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemColorSpacePropertiesFB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemColorSpacePropertiesFB>())).colorSpace as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemColorSpacePropertiesFB),
            "::",
            stringify!(colorSpace)
        )
    );
}
pub type PFN_xrEnumerateColorSpacesFB = ::std::option::Option<
    unsafe extern "C" fn(
        session: XrSession,
        colorSpaceCapacityInput: u32,
        colorSpaceCountOutput: *mut u32,
        colorSpaces: *mut XrColorSpaceFB,
    ) -> XrResult,
>;
pub type PFN_xrSetColorSpaceFB = ::std::option::Option<
    unsafe extern "C" fn(session: XrSession, colorspace: XrColorSpaceFB) -> XrResult,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrViewLocateFoveatedRenderingVARJO {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub foveatedRenderingActive: XrBool32,
}
#[test]
fn bindgen_test_layout_XrViewLocateFoveatedRenderingVARJO() {
    assert_eq!(
        ::std::mem::size_of::<XrViewLocateFoveatedRenderingVARJO>(),
        24usize,
        concat!("Size of: ", stringify!(XrViewLocateFoveatedRenderingVARJO))
    );
    assert_eq!(
        ::std::mem::align_of::<XrViewLocateFoveatedRenderingVARJO>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrViewLocateFoveatedRenderingVARJO)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewLocateFoveatedRenderingVARJO>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewLocateFoveatedRenderingVARJO),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewLocateFoveatedRenderingVARJO>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewLocateFoveatedRenderingVARJO),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrViewLocateFoveatedRenderingVARJO>())).foveatedRenderingActive
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrViewLocateFoveatedRenderingVARJO),
            "::",
            stringify!(foveatedRenderingActive)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFoveatedViewConfigurationViewVARJO {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub foveatedRenderingActive: XrBool32,
}
#[test]
fn bindgen_test_layout_XrFoveatedViewConfigurationViewVARJO() {
    assert_eq!(
        ::std::mem::size_of::<XrFoveatedViewConfigurationViewVARJO>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrFoveatedViewConfigurationViewVARJO)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrFoveatedViewConfigurationViewVARJO>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrFoveatedViewConfigurationViewVARJO)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrFoveatedViewConfigurationViewVARJO>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveatedViewConfigurationViewVARJO),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrFoveatedViewConfigurationViewVARJO>())).next as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveatedViewConfigurationViewVARJO),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrFoveatedViewConfigurationViewVARJO>())).foveatedRenderingActive
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrFoveatedViewConfigurationViewVARJO),
            "::",
            stringify!(foveatedRenderingActive)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemFoveatedRenderingPropertiesVARJO {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsFoveatedRendering: XrBool32,
}
#[test]
fn bindgen_test_layout_XrSystemFoveatedRenderingPropertiesVARJO() {
    assert_eq!(
        ::std::mem::size_of::<XrSystemFoveatedRenderingPropertiesVARJO>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(XrSystemFoveatedRenderingPropertiesVARJO)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XrSystemFoveatedRenderingPropertiesVARJO>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrSystemFoveatedRenderingPropertiesVARJO)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemFoveatedRenderingPropertiesVARJO>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemFoveatedRenderingPropertiesVARJO),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemFoveatedRenderingPropertiesVARJO>())).next as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemFoveatedRenderingPropertiesVARJO),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrSystemFoveatedRenderingPropertiesVARJO>()))
                .supportsFoveatedRendering as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrSystemFoveatedRenderingPropertiesVARJO),
            "::",
            stringify!(supportsFoveatedRendering)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerDepthTestVARJO {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub depthTestRangeNearZ: f32,
    pub depthTestRangeFarZ: f32,
}
#[test]
fn bindgen_test_layout_XrCompositionLayerDepthTestVARJO() {
    assert_eq!(
        ::std::mem::size_of::<XrCompositionLayerDepthTestVARJO>(),
        24usize,
        concat!("Size of: ", stringify!(XrCompositionLayerDepthTestVARJO))
    );
    assert_eq!(
        ::std::mem::align_of::<XrCompositionLayerDepthTestVARJO>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XrCompositionLayerDepthTestVARJO)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerDepthTestVARJO>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthTestVARJO),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerDepthTestVARJO>())).next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthTestVARJO),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerDepthTestVARJO>())).depthTestRangeNearZ
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthTestVARJO),
            "::",
            stringify!(depthTestRangeNearZ)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrCompositionLayerDepthTestVARJO>())).depthTestRangeFarZ
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrCompositionLayerDepthTestVARJO),
            "::",
            stringify!(depthTestRangeFarZ)
        )
    );
}
pub type PFN_xrSetEnvironmentDepthEstimationVARJO =
    ::std::option::Option<unsafe extern "C" fn(session: XrSession, enabled: XrBool32) -> XrResult>;
pub type PFN_xrCreateApiLayerInstance = ::std::option::Option<
    unsafe extern "C" fn(
        info: *const XrInstanceCreateInfo,
        apiLayerInfo: *const XrApiLayerCreateInfo,
        instance: *mut XrInstance,
    ) -> XrResult,
>;
pub const XrLoaderInterfaceStructs_XR_LOADER_INTERFACE_STRUCT_UNINTIALIZED:
    XrLoaderInterfaceStructs = 0;
pub const XrLoaderInterfaceStructs_XR_LOADER_INTERFACE_STRUCT_LOADER_INFO:
    XrLoaderInterfaceStructs = 1;
pub const XrLoaderInterfaceStructs_XR_LOADER_INTERFACE_STRUCT_API_LAYER_REQUEST:
    XrLoaderInterfaceStructs = 2;
pub const XrLoaderInterfaceStructs_XR_LOADER_INTERFACE_STRUCT_RUNTIME_REQUEST:
    XrLoaderInterfaceStructs = 3;
pub const XrLoaderInterfaceStructs_XR_LOADER_INTERFACE_STRUCT_API_LAYER_CREATE_INFO:
    XrLoaderInterfaceStructs = 4;
pub const XrLoaderInterfaceStructs_XR_LOADER_INTERFACE_STRUCT_API_LAYER_NEXT_INFO:
    XrLoaderInterfaceStructs = 5;
pub type XrLoaderInterfaceStructs = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrNegotiateLoaderInfo {
    pub structType: XrLoaderInterfaceStructs,
    pub structVersion: u32,
    pub structSize: size_t,
    pub minInterfaceVersion: u32,
    pub maxInterfaceVersion: u32,
    pub minApiVersion: XrVersion,
    pub maxApiVersion: XrVersion,
}
#[test]
fn bindgen_test_layout_XrNegotiateLoaderInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrNegotiateLoaderInfo>(),
        40usize,
        concat!("Size of: ", stringify!(XrNegotiateLoaderInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrNegotiateLoaderInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrNegotiateLoaderInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrNegotiateLoaderInfo>())).structType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNegotiateLoaderInfo),
            "::",
            stringify!(structType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrNegotiateLoaderInfo>())).structVersion as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNegotiateLoaderInfo),
            "::",
            stringify!(structVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrNegotiateLoaderInfo>())).structSize as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNegotiateLoaderInfo),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrNegotiateLoaderInfo>())).minInterfaceVersion as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNegotiateLoaderInfo),
            "::",
            stringify!(minInterfaceVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrNegotiateLoaderInfo>())).maxInterfaceVersion as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNegotiateLoaderInfo),
            "::",
            stringify!(maxInterfaceVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrNegotiateLoaderInfo>())).minApiVersion as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNegotiateLoaderInfo),
            "::",
            stringify!(minApiVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrNegotiateLoaderInfo>())).maxApiVersion as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNegotiateLoaderInfo),
            "::",
            stringify!(maxApiVersion)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrNegotiateApiLayerRequest {
    pub structType: XrLoaderInterfaceStructs,
    pub structVersion: u32,
    pub structSize: size_t,
    pub layerInterfaceVersion: u32,
    pub layerApiVersion: XrVersion,
    pub getInstanceProcAddr: PFN_xrGetInstanceProcAddr,
    pub createApiLayerInstance: PFN_xrCreateApiLayerInstance,
}
#[test]
fn bindgen_test_layout_XrNegotiateApiLayerRequest() {
    assert_eq!(
        ::std::mem::size_of::<XrNegotiateApiLayerRequest>(),
        48usize,
        concat!("Size of: ", stringify!(XrNegotiateApiLayerRequest))
    );
    assert_eq!(
        ::std::mem::align_of::<XrNegotiateApiLayerRequest>(),
        8usize,
        concat!("Alignment of ", stringify!(XrNegotiateApiLayerRequest))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrNegotiateApiLayerRequest>())).structType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNegotiateApiLayerRequest),
            "::",
            stringify!(structType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrNegotiateApiLayerRequest>())).structVersion as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNegotiateApiLayerRequest),
            "::",
            stringify!(structVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrNegotiateApiLayerRequest>())).structSize as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNegotiateApiLayerRequest),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrNegotiateApiLayerRequest>())).layerInterfaceVersion as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNegotiateApiLayerRequest),
            "::",
            stringify!(layerInterfaceVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrNegotiateApiLayerRequest>())).layerApiVersion as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNegotiateApiLayerRequest),
            "::",
            stringify!(layerApiVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrNegotiateApiLayerRequest>())).getInstanceProcAddr as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNegotiateApiLayerRequest),
            "::",
            stringify!(getInstanceProcAddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrNegotiateApiLayerRequest>())).createApiLayerInstance
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNegotiateApiLayerRequest),
            "::",
            stringify!(createApiLayerInstance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrNegotiateRuntimeRequest {
    pub structType: XrLoaderInterfaceStructs,
    pub structVersion: u32,
    pub structSize: size_t,
    pub runtimeInterfaceVersion: u32,
    pub runtimeApiVersion: XrVersion,
    pub getInstanceProcAddr: PFN_xrGetInstanceProcAddr,
}
#[test]
fn bindgen_test_layout_XrNegotiateRuntimeRequest() {
    assert_eq!(
        ::std::mem::size_of::<XrNegotiateRuntimeRequest>(),
        40usize,
        concat!("Size of: ", stringify!(XrNegotiateRuntimeRequest))
    );
    assert_eq!(
        ::std::mem::align_of::<XrNegotiateRuntimeRequest>(),
        8usize,
        concat!("Alignment of ", stringify!(XrNegotiateRuntimeRequest))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrNegotiateRuntimeRequest>())).structType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNegotiateRuntimeRequest),
            "::",
            stringify!(structType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrNegotiateRuntimeRequest>())).structVersion as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNegotiateRuntimeRequest),
            "::",
            stringify!(structVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrNegotiateRuntimeRequest>())).structSize as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNegotiateRuntimeRequest),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrNegotiateRuntimeRequest>())).runtimeInterfaceVersion
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNegotiateRuntimeRequest),
            "::",
            stringify!(runtimeInterfaceVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrNegotiateRuntimeRequest>())).runtimeApiVersion as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNegotiateRuntimeRequest),
            "::",
            stringify!(runtimeApiVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrNegotiateRuntimeRequest>())).getInstanceProcAddr as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XrNegotiateRuntimeRequest),
            "::",
            stringify!(getInstanceProcAddr)
        )
    );
}
pub type PFN_xrNegotiateLoaderApiLayerInterface = ::std::option::Option<
    unsafe extern "C" fn(
        loaderInfo: *const XrNegotiateLoaderInfo,
        apiLayerName: *const ::std::os::raw::c_char,
        apiLayerRequest: *mut XrNegotiateApiLayerRequest,
    ) -> XrResult,
>;
pub type PFN_xrNegotiateLoaderRuntimeInterface = ::std::option::Option<
    unsafe extern "C" fn(
        loaderInfo: *const XrNegotiateLoaderInfo,
        runtimeRequest: *mut XrNegotiateRuntimeRequest,
    ) -> XrResult,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XrApiLayerNextInfo {
    pub structType: XrLoaderInterfaceStructs,
    pub structVersion: u32,
    pub structSize: size_t,
    pub layerName: [::std::os::raw::c_char; 256usize],
    pub nextGetInstanceProcAddr: PFN_xrGetInstanceProcAddr,
    pub nextCreateApiLayerInstance: PFN_xrCreateApiLayerInstance,
    pub next: *mut XrApiLayerNextInfo,
}
#[test]
fn bindgen_test_layout_XrApiLayerNextInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrApiLayerNextInfo>(),
        296usize,
        concat!("Size of: ", stringify!(XrApiLayerNextInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrApiLayerNextInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrApiLayerNextInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrApiLayerNextInfo>())).structType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerNextInfo),
            "::",
            stringify!(structType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrApiLayerNextInfo>())).structVersion as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerNextInfo),
            "::",
            stringify!(structVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrApiLayerNextInfo>())).structSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerNextInfo),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrApiLayerNextInfo>())).layerName as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerNextInfo),
            "::",
            stringify!(layerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrApiLayerNextInfo>())).nextGetInstanceProcAddr as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerNextInfo),
            "::",
            stringify!(nextGetInstanceProcAddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrApiLayerNextInfo>())).nextCreateApiLayerInstance as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerNextInfo),
            "::",
            stringify!(nextCreateApiLayerInstance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrApiLayerNextInfo>())).next as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerNextInfo),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XrApiLayerCreateInfo {
    pub structType: XrLoaderInterfaceStructs,
    pub structVersion: u32,
    pub structSize: size_t,
    pub loaderInstance: *mut ::std::os::raw::c_void,
    pub settings_file_location: [::std::os::raw::c_char; 512usize],
    pub nextInfo: *mut XrApiLayerNextInfo,
}
#[test]
fn bindgen_test_layout_XrApiLayerCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<XrApiLayerCreateInfo>(),
        544usize,
        concat!("Size of: ", stringify!(XrApiLayerCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XrApiLayerCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XrApiLayerCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrApiLayerCreateInfo>())).structType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerCreateInfo),
            "::",
            stringify!(structType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrApiLayerCreateInfo>())).structVersion as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerCreateInfo),
            "::",
            stringify!(structVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrApiLayerCreateInfo>())).structSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerCreateInfo),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrApiLayerCreateInfo>())).loaderInstance as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerCreateInfo),
            "::",
            stringify!(loaderInstance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XrApiLayerCreateInfo>())).settings_file_location as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerCreateInfo),
            "::",
            stringify!(settings_file_location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XrApiLayerCreateInfo>())).nextInfo as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(XrApiLayerCreateInfo),
            "::",
            stringify!(nextInfo)
        )
    );
}
