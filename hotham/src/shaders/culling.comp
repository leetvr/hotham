#version 460

layout (local_size_x = 1024) in;
struct VkDrawIndexedIndirectCommand {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int  vertexOffset;
    uint firstInstance;
};

struct PrimitiveCullData {
    vec4 boundingSphere;
    uint indexInstance;
    uint indexOffset;
    bool visible;
};

layout(std430, set = 0, binding = 0)  buffer block {
    PrimitiveCullData data[];
} primitiveCullDataBuffer;

layout(set = 0, binding = 1) uniform CullData {
    mat4 leftClipPlanes;
    mat4 rightClipPlanes;
    uint drawCalls;
} cullData;

void main() {
    uint id = gl_GlobalInvocationID.x;

    if (id >= cullData.drawCalls) { return; }

    PrimitiveCullData d = primitiveCullDataBuffer.data[id];
    vec4 center4 = vec4(d.boundingSphere.xyz, 1);
    vec4 negRadius4 = -d.boundingSphere.wwww;

    // Perform a plane intersection check against each eye's clip plane.
    // If the primitive is visible in either eye, we consider it visible.
    primitiveCullDataBuffer.data[id].visible = any(bvec2(
        all(greaterThan(cullData.leftClipPlanes * center4, negRadius4)),
        all(greaterThan(cullData.rightClipPlanes * center4, negRadius4))
    ));
}
