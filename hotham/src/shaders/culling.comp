#version 460

layout (local_size_x = 256) in;
struct VkDrawIndexedIndirectCommand
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int  vertexOffset;
    uint firstInstance;
};

struct DrawData {
    mat4 transform;
    mat4 inverseTranspose;
    vec4 boundingSphere;
    uint materialID;
    uint skinID;
};

layout(std430, set = 0, binding = 0) readonly buffer DrawDataBuffer {
    DrawData data[];
} drawDataBuffer;

layout(std430, set = 0, binding = 1) writeonly buffer DrawCommandsBuffer {
    VkDrawIndexedIndirectCommand drawCommands[];
} drawCommandsBuffer;

layout(set = 0, binding = 2) uniform CullData {
    mat4 leftClipPlanes;
    mat4 rightClipPlanes;
    uint drawCalls;
} cullData;

void main() {
    uint id = gl_GlobalInvocationID.x;

    if (id >= cullData.drawCalls) { return; }

    DrawData d = drawDataBuffer.data[id];
    vec4 center4 = vec4(d.boundingSphere.xyz, 1);
    vec4 negRadius4 = -d.boundingSphere.wwww;

    // Treat as visible if at least one eye may see it
    bool isVisible = any(bvec2(
        all(greaterThan(cullData.leftClipPlanes * center4, negRadius4)),
        all(greaterThan(cullData.rightClipPlanes * center4, negRadius4))
    ));
    drawCommandsBuffer.drawCommands[id].instanceCount = uint(isVisible);
}
